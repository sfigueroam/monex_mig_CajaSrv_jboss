/*
 * @(#)PkgCajaServicesLogBean.java  2006/11/22 17:30:45
 *
 * This file was generated by "OBCOM SQL Wizard" version 5.1.198.
 * Copyright (c) OBCOM INGENIERIA S.A. (Chile) All rights reserved.
 * OBCOM PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
 *
 * YOU MAY EDIT THIS FILE <<Signature:BJjF5ZVUvXK2ASapHefEzA>>.
 */

package cl.teso.reca.pkgcajaserviceslog;

import java.math.BigDecimal;

import javax.annotation.Resource;
import javax.ejb.CreateException;
import javax.ejb.SessionContext;
import javax.ejb.Stateless;
import javax.ejb.TransactionAttribute;
import javax.ejb.TransactionAttributeType;
import javax.naming.InitialContext;
import javax.sql.DataSource;

import org.apache.log4j.Logger;
import java.io.InputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.File;
import java.io.FileInputStream;
import java.util.Properties;
import javax.naming.Context;
import javax.naming.InitialContext;


@Stateless(name="PkgCajaServicesLog", mappedName="cl.teso.reca.pkgcajaserviceslog.PkgCajaServicesLog")
@TransactionAttribute(TransactionAttributeType.REQUIRES_NEW)
public class PkgCajaServicesLog implements PkgCajaServicesLogLocal, PkgCajaServicesLogRemote
{
    private static final long serialVersionUID = 1L;

    public PkgCajaServicesLog() {}
    
    private SessionContext sessionContext;
    
    // @Resource(lookup="java:/jdbc/recaDS")
    // private DataSource dataSource;
    private DataSource dataSource = cargaDataSource();

    private static Logger logger = Logger.getLogger("cl.teso.reca.pkgcajaserviceslog.PkgCajaServicesLog");
    
    private static InputStream in = null;
	public static final String FILE_NAME_ME = "CajaSrvEculink.properties";
    public static String JNDI_DATASOURCE_RECA = "";

	private static DataSource cargaDataSource() {
        try {
            cargarProperties();
			Context ctx = new InitialContext();
			DataSource dataSource = (DataSource)ctx.lookup(JNDI_DATASOURCE_RECA);
			logger.info("----->>>>> CARGA del properties JNDI_DATASOURCE_RECA=" + JNDI_DATASOURCE_RECA);
			return dataSource;
		} catch(Exception ex) {
			ex.printStackTrace();
			logger.error("Error en el metodo PkgCajaServicesTrx.cargaDataSource() : " + ex);
		}
		return null;
    }
    
    public static void cargarProperties() throws Exception
    {
       try
       {
          in = PkgCajaServicesLog.class.getClassLoader().getResourceAsStream(FILE_NAME_ME);
          Properties prop = new Properties();
          prop.load(in);
          logger.info("------>>>>> Carga de cargarProperties Exitosa : " + FILE_NAME_ME);

          JNDI_DATASOURCE_RECA = prop.getProperty("JNDI.DATASOURCE.RECA");
   
          logger.info("------>>>>> Carga de propiedades Exitosa : ");
         in.close();
      } catch (FileNotFoundException e) {
          // TODO Auto-generated catch block
          logger.info("Error en el metodo CargarProperties()1 : " + e);
      } catch (IOException e) {
          // TODO Auto-generated catch block
          logger.info("Error en el metodo CargarProperties()2 : " + e);			            
      }
    }


	public GrabaLogTransaccionResult grabaLogTransaccion(String inTransaccionNombre, BigDecimal inOficina, BigDecimal inFormulario, String inCodigoAr, String inRutRol, String inParametros, BigDecimal inCodigoRetorno, String inMensajeRetorno, BigDecimal inCodigoRetOracle, String inMensajeRetOracle)
        throws PkgCajaServicesLogException
    {
        try
        {
            return GrabaLogTransaccionCaller.execute(getDataSource(), inTransaccionNombre, inOficina, inFormulario, inCodigoAr, inRutRol, inParametros, inCodigoRetorno, inMensajeRetorno, inCodigoRetOracle, inMensajeRetOracle);
        }
        catch (java.sql.SQLException ex)
        {
            //setRollbackOnly(); No hacemos RollBack en este EJB();
            throw new PkgCajaServicesLogException("RECA.PKG_CAJA_SERVICES_LOG.GRABA_LOG_TRANSACCION", ex);
        }
    }


	public DataSource getDataSource()
    {
        return dataSource;
    }


	public SessionContext getSessionContext()
    {
        return sessionContext;
    }


	public void setRollbackOnly()
    {
        try
        {
           //getSessionContext().setRollbackOnly();
        }
        catch (java.lang.IllegalStateException ex)
        {
            // Ignore: there is no active transaction.
        }
    }


	public void setSessionContext(SessionContext context)
    {
        sessionContext = context;
    }


	public void ejbCreate() throws CreateException
    {
    }


	public void ejbActivate() {}


	public void ejbPassivate() {}


	public void ejbRemove() {}
    
}
