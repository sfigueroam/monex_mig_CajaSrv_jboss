/*
 * @(#)ProcedureCaller.java  2006/11/22 17:30:44
 *
 * This file was generated by "OBCOM SQL Wizard" version 5.1.198.
 * Copyright (c) OBCOM INGENIERIA S.A. (Chile) All rights reserved.
 * OBCOM PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
 *
 * DO NOT EDIT THIS FILE <<Signature:5fKPaG+uCUfLV7mzbdmXSL>>.
 */

package cl.teso.reca.pkgcajaserviceslog;

import java.sql.CallableStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import javax.sql.RowSet;
//import weblogic.jdbc.rowset.RowSetFactory;
//import weblogic.jdbc.rowset.WLCachedRowSet;
import javax.sql.rowset.CachedRowSet;
import com.sun.rowset.CachedRowSetImpl;

/**
 * Implements methods common to all procedure callers.
 */
public abstract class ProcedureCaller
{
    // Used to define parameters of type REF CURSOR
    protected static final int ORACLE_CURSOR = -10;

    //------------------------------------------------------------
    //-- ResultSet methods ---------------------------------------
    //------------------------------------------------------------

    /**
     * Executes the procedure call and retrieves all returned ResultSets.
     */
    protected static void executeCall(CallableStatement call, ArrayList resultSets)
        throws java.sql.SQLException
    {
        int rowsAffected = 0;
        boolean haveRset = call.execute();
        do
        {
            if (haveRset)
                addResultSet(call.getResultSet(), resultSets);
            else
                rowsAffected = call.getUpdateCount();
            haveRset = call.getMoreResults();
        }
        while (haveRset || rowsAffected != -1);
    }

    /**
     * Appends a ResultSet to the supplied list of ResultSets.
     */
    protected static void addResultSet(ResultSet resultSet, ArrayList resultSets)
        throws java.sql.SQLException
    {
//        RowSetFactory factory = RowSetFactory.newInstance();
//        WLCachedRowSet rowSet = factory.newCachedRowSet();
    	CachedRowSet rowSet = new CachedRowSetImpl();
        rowSet.populate(resultSet);
        resultSets.add(rowSet);
    }

    /**
     * Builds an array of RowSets from the list of ResultSets.
     */
    protected static RowSet[] toRowSets(ArrayList resultSets)
    {
        RowSet[] array = new RowSet[resultSets.size()];
        return (RowSet[]) resultSets.toArray(array);
    }
}
