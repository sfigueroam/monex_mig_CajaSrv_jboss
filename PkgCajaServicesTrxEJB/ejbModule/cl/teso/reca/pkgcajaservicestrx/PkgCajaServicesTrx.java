/*
 * File: PkgCajaServicesTrxBean.java  2009-07-15 16:14:50-04:00
 * User: Felipe Gonzalez (DP S.A.)
 *
 * File generated by OBCOM SQL Wizard 5.1.248 (www.obcom.cl).
 * DO NOT EDIT THIS FILE <<Signature:2RNd9q-fPBsHePk5V0Zfp+>>.
 */

package cl.teso.reca.pkgcajaservicestrx;


import java.io.File;
import java.io.FileInputStream;
import java.math.BigDecimal;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.Properties;

import javax.annotation.Resource;
import javax.ejb.CreateException;
import javax.ejb.SessionContext;
import javax.ejb.Stateless;
import javax.ejb.TransactionAttribute;
import javax.ejb.TransactionAttributeType;
import javax.naming.Context;
import javax.naming.InitialContext;
import javax.rmi.PortableRemoteObject;
import javax.sql.DataSource;
import javax.sql.RowSet;

import cl.obcom.eculink.ClientLink;
import cl.obcom.eculink.ClientSlot;
import cl.obcom.eculink.LinkException;
import cl.obcom.eculink.Message;
import cl.teso.reca.cajasrv.pkgcajaservices.GetOficinaDescripcionResult;
import cl.teso.reca.cajasrv.pkgcajaservices.PkgCajaServicesRemote;
import cl.teso.reca.cajasrv.pkgcajaservices.ProcesarResult;
import cl.teso.reca.pkgcajaservicestrx.classes.Messages.ConsultarDeudaResult;
import cl.teso.reca.pkgcajaservicestrx.classes.Messages.MedioPago;
import cl.teso.reca.pkgcajaservicestrx.classes.Messages.PagoResult;
import cl.teso.reca.pkgcutservicestrx.classes.Messages.ConsultarAvisoReciboResult;
import cl.teso.reca.pkgcutservicestrx.classes.Messages.RecaClave;
import cl.teso.reca.pkgcutservicestrx.classes.Messages.RecaDeuda;
import cl.teso.reca.pkgcutservicestrx.classes.Messages.RecaItems;
import cl.teso.reca.pkgcutservicestrx.classes.Messages.RecaItemsVax;
import cl.teso.reca.pkgcutservicestrx.classes.Messages.RecaMensajes;
import cl.teso.reca.pkgcutservicestrx.classes.PackItemsUtil.ItemType.TipoDatoCut;
import cl.teso.reca.pkgcutservicestrx.classes.PackItemsUtil.TuplasVax;
import cl.teso.reca.pkgcutservicestrx.classes.Util.TypesUtil;
import cl.teso.reca.pkgcutservicestrxsaf.messages.ProcesaTrnSafResult;
import org.apache.log4j.Logger;
import java.io.InputStream;
import java.io.FileNotFoundException;
import java.io.IOException;


@Stateless(name="PkgCajaServicesTrx", mappedName="cl.teso.reca.pkgcajaservicestrx.PkgCajaServicesTrx")
@TransactionAttribute(TransactionAttributeType.REQUIRED)
public class PkgCajaServicesTrx implements PkgCajaServicesTrxLocal, PkgCajaServicesTrxRemote {
    private static final long serialVersionUID = 1L;

    private SessionContext sessionContext;

    // @Resource(lookup="java:/jdbc/recaDS")
    // private DataSource dataSource;
    private static Logger logger = Logger.getLogger("cl.teso.reca.pkgcajaservicestrx.PkgCajaServicesTrx");
    private DataSource dataSource = cargaDataSource();
    private static InputStream in = null;

    /**
     * Constructor.
     */
    public PkgCajaServicesTrx() {}
    
    private transient ClientLink myLink;
    private transient PkgCajaServicesRemote pkgCajaServicesRemote;    
    // --
    public static final char LS = TypesUtil.LS;
    public static final char CS = TypesUtil.CS; 	
    public static final char RS = TypesUtil.RS;    
    // --
    private static BigDecimal BigDecimal$ZERO = new BigDecimal(0);
    private static BigDecimal BigDecimal$ONE = new BigDecimal(1);        
    // --
    private static final String errorConsultaAR = "Error en Consulta AR: ";
    private static final String errorPagoARVax = "Error en Pago VAX: ";
    private static final String errorPagoAROracle = "Error en Pago AIX: ";
    private static final String errorReversaARVax = "Error en Reversa VAX: ";        
    private static final String errorCode20 = "Error en Base de Datos";    
    private static final String errorCode23AR = "RUT/ROL no existe";    
    private static final String errorCode25 = "RUT/ROL con mas de 500 Cuentas en CUT";
    private static final String errorCode26 = "RUT/ROL con mas de 40 Deudas";
    private static final String errorCode80 = "Error en parametros de la consulta";
    private static final String errorCodeDefault = "Codigo de Retorno desconocido";    
    private static final String idServicioCaja = "01";
    // --                
    private static final BigDecimal prmLoteCanal$CajaTgr = new BigDecimal(2);        
    private static final BigDecimal prmLoteTipo$Pagos = new BigDecimal(11);          
    // --    
    private boolean writeConsole = false;
    // --
    private static final BigDecimal codeFrmOrigen = new BigDecimal(20);    
    // --
    private static final BigDecimal prmArSistema$Caja = new BigDecimal(6);    
    // --
    private static String properties$destinoTrx$Vax = "VAX";
    private static String properties$destinoTrx$Aix = "AIX";
    private static String properties$true = "true";

    public static final String FILE_NAME_ME = "CajaSrvEculink.properties";
    public static String JNDI_DATASOURCE_RECA = "";
    //public static String JNDI_EJB_PKGCAJASERVICESTRXREMOTE = "";
    //public static String JNDI_EJB_PKGCAJASERVICESLOGREMOTE = "";
    public static String JNDI_EJB_PKGCAJASERVICESREMOTE = "";
    
	private static DataSource cargaDataSource() {
        try {
            cargarProperties();
			Context ctx = new InitialContext();
			DataSource dataSource = (DataSource)ctx.lookup(JNDI_DATASOURCE_RECA);
			logger.info("----->>>>> CARGA del properties JNDI_DATASOURCE_RECA=" + JNDI_DATASOURCE_RECA);
			return dataSource;
		} catch(Exception ex) {
			ex.printStackTrace();
			logger.error("Error en el metodo PkgCajaServicesTrx.cargaDataSource() : " + ex);
		}
		return null;
    }
    
    public static void cargarProperties() throws Exception
    {
       try
       {
          in = PkgCajaServicesTrx.class.getClassLoader().getResourceAsStream(FILE_NAME_ME);
          Properties prop = new Properties();
          prop.load(in);
          logger.info("------>>>>> Carga de cargarProperties Exitosa : " + FILE_NAME_ME);

          JNDI_DATASOURCE_RECA = prop.getProperty("JNDI.DATASOURCE.RECA");
          //JNDI_EJB_PKGCAJASERVICESTRXREMOTE = prop.getProperty("JNDI.EJB.PKGCAJASERVICESTRXREMOTE");
          //JNDI_EJB_PKGCAJASERVICESLOGREMOTE = prop.getProperty("JNDI.EJB.PKGCAJASERVICESLOGREMOTE");
          JNDI_EJB_PKGCAJASERVICESREMOTE = prop.getProperty("JNDI.EJB.PKGCAJASERVICESREMOTE");
   
          logger.info("------>>>>> Carga de propiedades Exitosa : ");
         in.close();
      } catch (FileNotFoundException e) {
          // TODO Auto-generated catch block
          logger.info("Error en el metodo CargarProperties()1 : " + e);
      } catch (IOException e) {
          // TODO Auto-generated catch block
          logger.info("Error en el metodo CargarProperties()2 : " + e);			            
      }
    }

	public ConsultarAvisoReciboResult consultaARCaja (BigDecimal  oficinaId, String  avisoReciboCodigo, BigDecimal   formTipo) 
	{
        String codigoBarras = null;
        String codigoBarrasFormateado = null;
        ConsultarAvisoReciboResult result = new ConsultarAvisoReciboResult();        
        String destinoConsulta = null;
        String[] codigo = null;
        boolean esConsultaDeuda = true; // parametro ocupado en consultarAr

        try {
            destinoConsulta = getProperties("consultaARCaja.destinoConsulta");
        } catch (Exception e) {
            result.setResultCode(ConsultarAvisoReciboResult.TRX_ERROR);
            result.setResultMessage(
                    "Error al cargar archivo de propiedades. Propiedad consultaARCaja.destinoConsulta");
            return result;
        }	
        try {
            codigo = avisoReciboCodigo.trim().split("-");
            codigoBarras = codigo[0] + codigo[1];            
            codigoBarrasFormateado = codigoBarras;
            // codigoBarrasFormateado = TypesUtil.rellenaCerosIzquierda(codigoBarras, 15);
        } catch (Exception e) {
            result.setResultCode(ConsultarAvisoReciboResult.TRX_COMPLETED);
            return result;
        }
        try {
            if (destinoConsulta.equals(properties$destinoTrx$Vax)) {
                // Primero vamos a consultar a AIX.
                // Caso que AR no sea encontrado vamos a la VAX                
                result = consultarAr(codigoBarrasFormateado, null, formTipo,
                        esConsultaDeuda);                  
               
                if (result.getResultCode().equals(
                        ConsultarAvisoReciboResult.NO_DATA_FOUND)) {
                    result = consultaVaxAR(oficinaId, codigoBarrasFormateado,
                            formTipo);                        
                }
            } else {                                   
                result = consultarAr(codigoBarrasFormateado, null, formTipo,
                        esConsultaDeuda);
                
            }
            // Corrige implementacion de Consultar AR con Formato que recibe la caja del Codigo de barras con verificador separado por guion        
            if (result.recaDeuda != null) {                
                result.recaDeuda.setAvisoReciboCodigo(avisoReciboCodigo);
            }
            // Al no encontrar deudas se debe responder simplemente OK y enviar deuda nula.
            if (result.getResultCode().equals(
                    ConsultarAvisoReciboResult.NO_DATA_FOUND)) {
                result.setResultCode(ConsultarAvisoReciboResult.TRX_COMPLETED);
                result.recaDeuda = null;
            }                
            
        } catch (Exception e) {
            result.setResultCode(ConsultarAvisoReciboResult.TRX_ERROR);
            result.setResultMessage(
                    formatException(e, "Excepcion en consultaARCaja:", true, 0));                        
        }	
        return result;
    } 
		

	public ConsultarDeudaResult consultaDeudaCaja
            (BigDecimal  oficinaId,
            RecaClave   clave) {
        ConsultarDeudaResult result = new ConsultarDeudaResult(); 		
        String destinoConsulta = null;
        String user = "CajaSrv.pagoArCaja,Oficina: " + oficinaId;
        boolean recaGeneraCodigoBarra = false;

        try {
            destinoConsulta = getProperties("consultaDeudaCaja.destinoConsulta");
        } catch (Exception e) {            
            result.setResultCode(ConsultarDeudaResult.TRX_ERROR);
            result.setResultMessage(
                    "Error al cargar archivo de propiedades. Propiedad consultaDeudaCaja.destinoConsulta");
            return result;
        }	
        
        try {
            if (getProperties("consultaDeudaCaja.sistemaGeneraCodBarra").equals(
                    properties$destinoTrx$Vax)) {
                recaGeneraCodigoBarra = false;
            } else {
                recaGeneraCodigoBarra = true;
            }                
        } catch (Exception e) {                      
            result.setResultCode(
                    ConsultarDeudaResult.TRX_ERROR);
            result.setResultMessage(
                    "Error al cargar archivo de propiedades. Propiedad consultaDeudaCaja.recaGeneraCodigoBarra");
            return result;
        }        
        
        try {
            if (destinoConsulta.equals(properties$destinoTrx$Vax)) {                

                result = consultaVaxCajaLlave(oficinaId, "Caja", clave,
                        recaGeneraCodigoBarra);
            } else { // destinoConsulta=AIX                

                result = consultaRecaDeudas(user, oficinaId, clave);
            }
        } catch (Exception e) {
            result.setResultCode(ConsultarDeudaResult.TRX_ERROR);
            result.setResultMessage(
                    formatException(e, "Excepcion en consultaDeudaCaja", true, 0));            
        }
        return result;
    }	
	

	public PagoResult pagoARCaja
            (BigDecimal  oficinaId,
            String terminal,
            Calendar turnoInicio,
            Calendar    operacionFecha,
            BigDecimal  operacionFolio,
            BigDecimal  operacionSecuencia,
            String      avisoReciboFuente,
            String      avisoReciboCodigo,
            BigDecimal  folioF01,
            BigDecimal  montoPagado,
            MedioPago   medioPago,
            Boolean     ingresoForzado,
            RecaClave	claveDeuda) {	
        PagoResult pagoResult = new PagoResult();
        String codigoBarras = null;
        String codigoBarrasFormateado = null;
        ConsultarAvisoReciboResult consultarAvisoReciboResult;
        boolean esConsultaDeuda = false; // parametro ocupado en consultarAr

        try {
            String[] codigo = avisoReciboCodigo.trim().split("-");            

            codigoBarras = codigo[0] + codigo[1];
            codigoBarrasFormateado = codigoBarras;           
        } catch (Exception e) {
            throw new LinkException(
                    "Codigo de AR Invalido, no se pudo procesar Pago");
        } 
        try {
            consultarAvisoReciboResult = consultarAr(codigoBarrasFormateado,
                    null, null, esConsultaDeuda);
            if (consultarAvisoReciboResult.getResultCode().equals(
                    ConsultarAvisoReciboResult.NO_DATA_FOUND)) {
                pagoResult.setResultCode(PagoResult.TRX_ERROR);

                Exception e = new Exception();

                pagoResult.setResultMessage(
                        formatException(e,
                        "No se procesa pago. AR no encontrado en base de datos",
                        true, 0));                               
                return pagoResult;
            }
        } catch (Exception e) {
            pagoResult.setResultCode(PagoResult.TRX_ERROR);                    
            pagoResult.setResultMessage(
                    formatException(e,
                    "No se procesa pago. Excepcion al obtener AR.", true, 0));                               
            return pagoResult;     
        } 
           
        pagoResult = pagoARCajaTotal(oficinaId, terminal, turnoInicio,
                operacionFecha, operacionFolio, operacionSecuencia,
                avisoReciboCodigo, folioF01, montoPagado, medioPago,
                ingresoForzado, claveDeuda);

        return pagoResult;
    }
    
    private PagoResult pagoARCajaTotal
            (BigDecimal  oficinaId,
            String terminal,
            Calendar turnoInicio,
            Calendar    operacionFecha,
            BigDecimal  operacionFolio,
            BigDecimal  operacionSecuencia,            
            String      avisoReciboCodigo,
            BigDecimal  folioF01,
            BigDecimal  montoPagado,
            MedioPago   medioPago,  
            Boolean     ingresoForzado,          
            RecaClave	claveDeuda) {
        PagoResult resultPago = new PagoResult();                	
        boolean pagoVax = false;
        boolean pagoAix = false;        
        String codigoBarras = null;
        String codigoBarrasFormateado = null;
        String user = "CajaSrv.pagoArCaja,Oficina: " + oficinaId;

        if (claveDeuda != null) {
            claveDeuda.setFormVer("A");
        } // Caja no envia version del Formulario, se asume A
        else {
            
            resultPago.setResultCode(PagoResult.TRX_ERROR);
            resultPago.setResultMessage(
                    "Error al Procesar Pago, Campo claveDeuda no puede ser nulo");
            return resultPago;
        }    
        try {
            if (getProperties("pagoARCaja.pagoVax").equals(properties$true)) {
                pagoVax = true;
            }
            if (getProperties("pagoARCaja.pagoAix").equals(properties$true)) {
                pagoAix = true;
            }                
        } catch (Exception e) {
            resultPago.setResultCode(PagoResult.TRX_ERROR); 
            resultPago.setResultMessage(
                    "Error al cargar archivo de propiedades. Propiedad pagoARCaja.pagoVax/pagoARCaja.pagoAix");
            return resultPago;
        }	
        try {
            String[] codigo = avisoReciboCodigo.trim().split("-");            

            codigoBarras = codigo[0] + codigo[1];
            codigoBarrasFormateado = codigoBarras;
            // codigoBarrasFormateado = TypesUtil.rellenaCerosIzquierda(codigoBarras, 15);        
        } catch (Exception e) {
            throw new LinkException(
                    "Codigo de AR Invalido, no se pudo procesar Pago");
        }
        // FGM 20100422. Se implemente envio de transacciones a VAX  mediante tabla TRN_SAF
        if (pagoVax) {}
        if (pagoAix) {			            
            boolean esReversa = false;
            String pagoVaxStr;

            if (pagoVax) {
                pagoVaxStr = "S";
            } else { 
                pagoVaxStr = "N";
            }            

            resultPago = pagoReversaArRecaCaja(user, esReversa, oficinaId,
                    codigoBarrasFormateado, folioF01, operacionFecha, terminal,
                    turnoInicio, operacionFolio, operacionSecuencia, medioPago,
                    montoPagado, ingresoForzado, pagoVaxStr);

            RecaMensajes[] mensajePagoOracle = new RecaMensajes[1];

            mensajePagoOracle[0] = new RecaMensajes();
            mensajePagoOracle[0].setCodigo(resultPago.getResultCode());
            mensajePagoOracle[0].setGlosa(resultPago.getResultMessage());
            resultPago.recaMensajes = mensajePagoOracle;
            if (resultPago.getResultCode().intValue() == 5) {            
                resultPago.setResultCode(PagoResult.TRX_COMPLETED);
            } else { 
                resultPago.setResultCode(PagoResult.TRX_ERROR);
            }
            
        }	
        return resultPago;
    }
    

	public ProcesaTrnSafResult pagoArCajaVaxSaf    
            (BigDecimal folioEnvio) throws Exception {
        ProcesaTrnSafResult pagoArCajaResult = new ProcesaTrnSafResult();
        PagoResult pagoARCajaVaxResult = new PagoResult();
        String dataTrnSaf = null;
        String codigoBarras = null;
        BigDecimal  oficinaId = null;
        String terminal = null;
        Calendar turnoInicio = null;
        Calendar    operacionFecha = null;
        BigDecimal  operacionFolio = null;
        BigDecimal  operacionSecuencia = null;
        BigDecimal  folioF01 = null;
        BigDecimal  montoPagado = null;
        boolean     ingresoForzado = false;
        boolean esReversa = false;
        String itemsCutStr;
                
        // Primero que nada obtenemos los datos de la transaccion desde la tabla TRN_SAF y BEL_TRAN 
  	
       
        GetRegistrosTrnSafResult getRegistrosTrnSafResult = getRegistrosTrnSaf(
                folioEnvio);
        RowSet rowSet = getRegistrosTrnSafResult.getRowSet(0);

        rowSet.last();
        int nrows = rowSet.getRow(); 

        if (nrows == 0) {
            pagoArCajaResult.setResultCode(ProcesaTrnSafResult.TRX_EXCEPTION);
            pagoArCajaResult.setResultMessage(
                    "Movimiento no encontrado en Tabla SAF");
            return pagoArCajaResult;
        }            
        rowSet.first();
        
        itemsCutStr = rowSet.getString("ITEMS");
                          
        
        // Obtenemos los parametros adicionales desde la columna data del registro
        dataTrnSaf = rowSet.getString("DATA");
        try {
            String[] dataArr = dataTrnSaf.split(String.valueOf(TypesUtil.LS));
            String[] dataLine;
            String parametro;
            String valor;
            

            for (int i = 0; i < dataArr.length; i++) {
                dataLine = dataArr[i].split(String.valueOf(TypesUtil.CS)); 
                if (dataLine.length == 1) {
                    continue;
                }
                parametro = dataLine[0];
                valor = dataLine[1];                   
                        
                if (parametro.equalsIgnoreCase("codigoBarras")) { 
                    codigoBarras = valor;
                } else if (parametro.equalsIgnoreCase("oficinaId")) { 
                    oficinaId = new BigDecimal(valor);
                } else if (parametro.equalsIgnoreCase("terminal")) { 
                    terminal = valor;
                } else if (parametro.equalsIgnoreCase("turnoInicio")) { 
                    turnoInicio = StringToCalendarYYYYMMDDHHMMSS(valor);
                } else if (parametro.equalsIgnoreCase("operacionFecha")) { 
                    operacionFecha = StringToCalendarYYYYMMDDHHMMSS(valor);
                } else if (parametro.equalsIgnoreCase("operacionFolio")) { 
                    operacionFolio = new BigDecimal(valor);
                } else if (parametro.equalsIgnoreCase("operacionSecuencia")) { 
                    operacionSecuencia = new BigDecimal(valor);
                } else if (parametro.equalsIgnoreCase("folioF01")) { 
                    folioF01 = new BigDecimal(valor);
                } else if (parametro.equalsIgnoreCase("montoPagado")) { 
                    montoPagado = new BigDecimal(valor);
                } else if (parametro.equalsIgnoreCase("ingresoForzado")) { 
                    ingresoForzado = StringToBooleanSN(valor);
                } else if (parametro.equalsIgnoreCase("esReversa")) { 
                    esReversa = StringToBooleanSN(valor);
                }    
            }
        
        } catch (Exception e) {            
            throw new Exception(
                    formatException(e, "Error al obtener DATA. ", true, 0)); 
        }                   
        
        pagoARCajaVaxResult = pagoARCajaVax(codigoBarras, // String codigoBarras,
                oficinaId, // BigDecimal  oficinaId,
                terminal, // String terminal,
                turnoInicio, // Calendar turnoInicio,
                operacionFecha, // Calendar    operacionFecha,
                operacionFolio, // BigDecimal  operacionFolio,
                operacionSecuencia, // BigDecimal  operacionSecuencia,                        
                folioF01, // BigDecimal  folioF01,
                montoPagado, // BigDecimal  montoPagado,
                ingresoForzado, // Boolean     ingresoForzado,
                esReversa,// boolean esReversa
                itemsCutStr //String itemsCutStr
                );                           
        
        pagoArCajaResult.setResultCode(pagoARCajaVaxResult.getResultCode());
        pagoArCajaResult.setResultMessage(pagoARCajaVaxResult.getResultMessage());
                
        return pagoArCajaResult;
                
    }            
    
    PagoResult pagoARCajaVax(String codigoBarras,
            BigDecimal  oficinaId,
            String terminal,
            Calendar turnoInicio,
            Calendar    operacionFecha,
            BigDecimal  operacionFolio,
            BigDecimal  operacionSecuencia,                        
            BigDecimal  folioF01,
            BigDecimal  montoPagado,
            boolean     ingresoForzado,
            boolean esReversa,
            String itemsCutStr) {
    
        PagoResult resultPagoVax = new PagoResult();        

        if (!esReversa) {   
            /* FGM 20101130. De ahora en adelante todos los pagos a VAX son con ITEMS. Todos los Ars Deben estar en Oracle.
            if (esArGeneradoReca(codigoBarras)) {
                resultPagoVax = pagoDpsVax(oficinaId, codigoBarras, folioF01,
                        operacionFecha, montoPagado, terminal, turnoInicio,
                        operacionFolio, operacionSecuencia);
            } else {  
                resultPagoVax = pagoArVax(oficinaId, codigoBarras, folioF01,
                        operacionFecha, montoPagado, ingresoForzado, terminal,
                        turnoInicio, operacionFolio, operacionSecuencia);
            }*/
            
            resultPagoVax = pagoDpsVax(oficinaId, codigoBarras, folioF01,
                        operacionFecha, montoPagado, terminal, turnoInicio,
                        operacionFolio, operacionSecuencia,itemsCutStr);
        } else {
            resultPagoVax = reversaArVax(oficinaId, codigoBarras, folioF01,
                    operacionFecha, montoPagado, ingresoForzado, terminal,
                    turnoInicio, operacionFolio, operacionSecuencia);
        
        }            
        return resultPagoVax;	
    }
    		

	public PagoResult reversaPagoARCaja
            (BigDecimal  oficinaId,
            String      terminal,
            Calendar    turnoInicio,
            Calendar    operacionFecha,
            BigDecimal  operacionFolio,
            BigDecimal  operacionSecuencia,
            String      avisoReciboFuente,
            String      avisoReciboCodigo,
            BigDecimal  folioF01,
            BigDecimal  montoPagado,
            Boolean     ingresoForzado,
            RecaClave	claveDeuda) {
        PagoResult resultReversa = new PagoResult();                	
        boolean pagoVax = false;
        boolean pagoAix = false;  
        String codigoBarras = null;    
        String codigoBarrasFormateado = null;       
        String user = "CajaSrv.pagoArCaja,Oficina: " + oficinaId;

        if (claveDeuda != null) {
            claveDeuda.setFormVer("A");
        } // Caja no envia version del Formulario, se asume A
        else {            

            resultReversa.setResultCode(PagoResult.TRX_ERROR);
            resultReversa.setResultMessage(
                    "Error al Procesar Reversa, Campo claveDeuda no puede ser nulo");
            return resultReversa;
        } 
        try {
            if (getProperties("pagoARCaja.pagoVax").equals(properties$true)) {
                pagoVax = true;
            }
            if (getProperties("pagoARCaja.pagoAix").equals(properties$true)) {
                pagoAix = true;
            }                
        } catch (Exception e) {
            resultReversa.setResultCode(PagoResult.TRX_ERROR); 
            resultReversa.setResultMessage(
                    "Error al cargar archivo de propiedades. Propiedad pagoARCaja.pagoVax/pagoARCaja.pagoAix");
            return resultReversa;
        }
        try {
            String[] codigo = avisoReciboCodigo.trim().split("-");

            codigoBarras = codigo[0] + codigo[1];   
            codigoBarrasFormateado = codigoBarras;                    
        } catch (Exception e) {
            throw new LinkException(
                    "Codigo de AR o Formulario Invalido, no se pudo procesar Reversa");
        }
        // FGM 20100422. Se implemente envio de transacciones a VAX  mediante tabla TRN_SAF	
        if (pagoVax) {}
        if (pagoAix) {	            
            boolean esReversa = true;  
            String pagoVaxStr;

            if (pagoVax) {
                pagoVaxStr = "S";
            } else { 
                pagoVaxStr = "N";
            }                

            resultReversa = pagoReversaArRecaCaja(user, esReversa, oficinaId,
                    codigoBarrasFormateado, folioF01, operacionFecha, terminal,
                    turnoInicio, operacionFolio, operacionSecuencia, null// medioPago
                    , montoPagado// montoPagado
                    , ingresoForzado, pagoVaxStr);

            RecaMensajes[] mensajePagoOracle = new RecaMensajes[1];

            mensajePagoOracle[0] = new RecaMensajes();
            mensajePagoOracle[0].setCodigo(resultReversa.getResultCode());
            mensajePagoOracle[0].setGlosa(resultReversa.getResultMessage());
            resultReversa.recaMensajes = mensajePagoOracle;
            if (resultReversa.getResultCode().intValue() == 5) {            
                resultReversa.setResultCode(PagoResult.TRX_COMPLETED);
            } else { 
                resultReversa.setResultCode(PagoResult.TRX_ERROR);
            }
           
        }
        return resultReversa;
    }
    
    private ConsultarAvisoReciboResult consultarAr
            (String inCodigoBarra,
            BigDecimal inFolioAr,
            BigDecimal formTipo,
            boolean esConsultaDeuda) // El parametro esConsultaDeuda indica si la consulta es por una consulta de deudas en linea
    // o es producto de un pago que necesita obtener informacion de un AR guardado,
    // Esto ya que al ser consultaDeuda solo devuelve los Ars que no estan pagados
    {
        ConsultarAvisoReciboResult consultarARResult = new ConsultarAvisoReciboResult();

        consultarARResult.setResultCode(BigDecimal$ZERO);
        try {             
            ArConsultarResult result = arConsultar(inCodigoBarra, inFolioAr);       
            RowSet rowSet = result.getRowSet(0);																					

            rowSet.last();

            int nrows = rowSet.getRow();

            if (nrows == 0) {
                consultarARResult.setResultCode(
                        ConsultarAvisoReciboResult.NO_DATA_FOUND);
                consultarARResult.setResultMessage("AR no encontrado");
                return consultarARResult;
            }	            
            rowSet.beforeFirst();           

            RecaItems[] itemsAr = null;
            String itemsArStr = null;

            while (rowSet.next()) {
                
                // Verificamos que el AR no esta pagado. Caso contrario devolvemos NO ENCONTRADO
                if (esConsultaDeuda
                        && rowSet.getString("ESTA_PAGADO").equalsIgnoreCase("S")) {
                    consultarARResult.setResultCode(
                            ConsultarAvisoReciboResult.NO_DATA_FOUND);
                    consultarARResult.setResultMessage("AR no encontrado");
                    return consultarARResult;
                }	
                RecaClave claveDeuda = new RecaClave();         

                claveDeuda.setClienteTipo(rowSet.getBigDecimal("CLIENTE_TIPO"));
                claveDeuda.setRutRol(rowSet.getBigDecimal("RUT_ROL"));
                claveDeuda.setRutRolDv(rowSet.getString("RUT_ROL_DV"));
                // claveDeuda.setInstitId(rowSet.getBigDecimal("CUT_CTA$INSTITUCION"));
                claveDeuda.setFormTipo(rowSet.getBigDecimal("FORM_COD"));
                
                claveDeuda.setFormVer(rowSet.getString("FORM_VER"));                
                claveDeuda.setFormFolio(rowSet.getBigDecimal("FORM_FOLIO"));
                claveDeuda.setMonedaId(rowSet.getBigDecimal("MONEDA"));
                claveDeuda.setPeriodo(
                        TypesUtil.dateToCalendar(rowSet.getDate("PERIODO")));
                claveDeuda.setVencimiento(
                        TypesUtil.dateToCalendar(rowSet.getDate("FECHA_VCTO")));

                RecaDeuda recaDeuda = new RecaDeuda();

                recaDeuda.setRecaClave(claveDeuda);         
                recaDeuda.setFechaValidez(
                        TypesUtil.dateToCalendar(rowSet.getDate("FECHA_VALIDEZ"))); // falta fechaValidez))
                recaDeuda.setFechaEmision(
                        TypesUtil.dateToCalendar(rowSet.getDate("FECHA_EMISION")));
                recaDeuda.setFechaLiquidacion(
                        TypesUtil.dateToCalendar(rowSet.getDate("FECHA_CAJA")));
                recaDeuda.setMonedaId(rowSet.getBigDecimal("MONEDA"));
                recaDeuda.setMontoEnPlazo(rowSet.getBigDecimal("MONTO_PLAZO"));
                recaDeuda.setMontoReajustes(rowSet.getBigDecimal("REAJUSTES"));
                recaDeuda.setMontoIntereses(rowSet.getBigDecimal("INTERESES"));
                recaDeuda.setMontoMultas(rowSet.getBigDecimal("MULTAS"));
                recaDeuda.setMontoCondonacion(
                        rowSet.getBigDecimal("CONDONACIONES"));
                recaDeuda.setMontoTotal(rowSet.getBigDecimal("MONTO_TOTAL"));         
                recaDeuda.setAvisoReciboCodigo(rowSet.getString("CODIGO_BARRA"));
                recaDeuda.setAvisoReciboFuente(properties$destinoTrx$Aix);
                itemsArStr = rowSet.getString("ITEMS");
                itemsAr = RecaItems.SplitTouplesReca2(itemsArStr);                                
                recaDeuda.setRecaItems(itemsAr);
                
                // FGM 20100426. Por cambio pedido por TGR. La consulta de ARs solo devolvera formularios de origen
                if (esConsultaDeuda
                        && esFrmGiro(recaDeuda.getRecaClave().getFormTipo())) { 
                    recaDeuda.getRecaClave().setFormTipo(
                            getFrmOrigenfromItems(itemsAr));
                }
                
                // Debemos filtrar por formulario al consultar un AR. Ya que la caja lo necesita asi.
                if (esConsultaDeuda
                        && !claveDeuda.getFormTipo().equals(formTipo)) {
                    consultarARResult.setResultCode(
                            ConsultarAvisoReciboResult.NO_DATA_FOUND);
                    consultarARResult.setResultMessage("AR no encontrado");
                    return consultarARResult;
                }	
            
                consultarARResult.recaDeuda = recaDeuda;
                if (rowSet.getString("ES_REZAGADO").equalsIgnoreCase("S")) { 
                    consultarARResult.esCajaRezagada = true;
                } else {
                    consultarARResult.esCajaRezagada = false;
                }
                break; // Solo puede venir un AR por consulta		         
            }            
            rowSet.close();
        } catch (Exception e) {            
            consultarARResult.setResultCode(BigDecimal$ONE);
            consultarARResult.setResultMessage(
                    formatException(e, "Excepcion en consultarAr:", true, 0));
        }
        return consultarARResult;
    }      
    
    // -----------------------------------------------------------------------
	
    private ConsultarAvisoReciboResult consultaVaxAR
            (BigDecimal  oficinaId,
            String avisoReciboCodigo,
            BigDecimal  formTipo) {
        ConsultarAvisoReciboResult consultarAvisoReciboResult = new ConsultarAvisoReciboResult();

        consultarAvisoReciboResult.setResultCode(BigDecimal$ZERO);

        RecaDeuda deuda = null;
        ClientSlot slot = null;
        String error = null;
        int codigoRetorno;
        String usuario = "OficinaCaja" + oficinaId;        
        int nroItems = 0;     
        String arrItemsStr = null;        
        String tablaDeudas = null;
        Message msgLayoutDeuda = new Message();        
        String codigoBarrasVax;        

        try {
            slot = getLinkSlot();

            PkgCajaServicesRemote ejbCajaServices = createPkgCajaServicesRemote();
            GetOficinaDescripcionResult oficinaData = ejbCajaServices.getOficinaDescripcion(
                    oficinaId);
            Message mensajeIn = new Message();

            mensajeIn.setLayout(myLink.getLayout("CONIN"));
            mensajeIn.setNumber("CRG_RUT_IRA", oficinaData.getOutRutIra());
            mensajeIn.setString("CRG_DV_IRA", oficinaData.getOutRutIraDv());
            mensajeIn.setNumber("CRG_OFICINA", oficinaData.getOutComunaConara());            
            mensajeIn.setString("CRG_CODBARRA", avisoReciboCodigo);

            Message mensajeOut = slot.sendTransaction("LIQLIN.CONSULTA",
                    mensajeIn, false, false, getTransaccionTimeout("cajaSrv"));

            if (mensajeOut.getReplyCode() != Message.REPLY_ACK) {               
                throw new Exception(mensajeOut.getData());
            } else if ((codigoRetorno = mensajeOut.getInteger("CRG_RETORNO"))
                    != 0) {   
                switch (codigoRetorno) {
                case 20:
                    error = errorCode20;
                    break;

                case 23:
                    return consultarAvisoReciboResult; // "RUT/ROL no existe";

                case 24:
                    return consultarAvisoReciboResult; // "RUT/ROL sin deudas"; 

                case 25:
                    error = errorCode25;
                    break;

                case 26:
                    error = errorCode26;
                    break;

                case 30:
                    return consultarAvisoReciboResult; // "RUT/ROL sin deudas";                     

                case 80:
                    error = errorCode20;
                    break;

                default:
                    error = errorCodeDefault + " (."
                            + Integer.toString(codigoRetorno) + ")";
                    break;    
                }
                throw new LinkException(errorConsultaAR + error);
            }
            
            RecaClave recaClave = new RecaClave();            

            tablaDeudas = mensajeOut.getString("CRG-TABLADEU");
            msgLayoutDeuda.setData(tablaDeudas);
            msgLayoutDeuda.setLayout(myLink.getLayout("LIQTODODEU"));
            
            recaClave = new RecaClave();
            recaClave.setClienteTipo(msgLayoutDeuda.getNumber("D-TIP-CONT"));
            recaClave.setRutRol(msgLayoutDeuda.getNumber("D-RUT-ROL"));
            recaClave.setRutRolDv(
                    TypesUtil.getDV(recaClave.getRutRol().toString()));
            recaClave.setFormTipo(msgLayoutDeuda.getNumber("D-TIP-FORM"));            
            recaClave.setFormFolio(msgLayoutDeuda.getNumber("D-FOLIO"));
            recaClave.setVencimiento(
                    TypesUtil.intToCalendar(
                            msgLayoutDeuda.getInteger("D-FECVTO")));
            recaClave.setPeriodo(
                    calculaPeriodoVax(recaClave.getVencimiento(), null));                    
            deuda = new RecaDeuda();
            deuda.setRecaClave(recaClave);
            deuda.setFechaValidez(
                    TypesUtil.intToCalendar(
                            msgLayoutDeuda.getInteger("D-FECHA-VALIDEZ")));
            deuda.setFechaEmision(
                    TypesUtil.intToCalendar(
                            msgLayoutDeuda.getInteger("D-FECEMI")));
            deuda.setFechaLiquidacion(
                    TypesUtil.intToCalendar(
                            msgLayoutDeuda.getInteger("D-FECLIQ")));
            deuda.setMontoEnPlazo(msgLayoutDeuda.getNumber("D-VALOR-EN-PLAZO"));
            deuda.setMontoIntereses(
                    msgLayoutDeuda.getNumber("D-VALOR-INTERESES"));             
            deuda.setMontoReajustes(
                    msgLayoutDeuda.getNumber("D-VALOR-REAJUSTES"));
            deuda.setMontoCondonacion(
                    msgLayoutDeuda.getNumber("D-VALOR-CONDONACION"));
            deuda.setMontoTotal(msgLayoutDeuda.getNumber("D-VALOR-TOTAL-PAGO"));
            codigoBarrasVax = msgLayoutDeuda.getString("D-IDTRANSAC"); // + TypesUtil.rellenaCerosIzquierda(claveDeudaOut.getFormTipo().toString(), 4);            
            // El codigo de Barras enviador a la Caja lleva un '-' como separador del DV                                
            deuda.setAvisoReciboCodigo(formatCodigoBarraDV(codigoBarrasVax));
                    
            deuda.setAvisoReciboFuente(properties$destinoTrx$Vax);
            arrItemsStr = msgLayoutDeuda.getString("D-TAB-ITEMS");                    
            nroItems = msgLayoutDeuda.getInteger("D-NRO-ITEMS");         
                    
            RecaItemsVax[] itemsVax = getRecaItemsVax(recaClave.getFormTipo(),
                    arrItemsStr, nroItems);

            // Grabamos el AR en la tabla de ARs de RECA                               
            arIngresar(TypesUtil.calendarToDate(deuda.getFechaLiquidacion()), // Date inFechaCaja,
                    TypesUtil.calendarToDate(deuda.getFechaEmision()), // Date inFechaEmision,
                    TypesUtil.calendarToDate(deuda.getFechaValidez()), // Date inFechaValidez,
                    prmArSistema$Caja, // BigDecimal inSistema,                  
                    usuario, // String Usuario                            
                    recaClave.getClienteTipo(), // BigDecimal inClienteTipo,
                    recaClave.getRutRol(), // BigDecimal inRutRol,
                    recaClave.getRutRolDv(), // String inRutRolDv,
                    recaClave.getFormTipo(), // BigDecimal inFormCod,
                    recaClave.getFormVer(), // String inFormVer,
                    recaClave.getFormFolio(), // BigDecimal inFormFolio,
                    null, // String inFormFolioDv,
                    TypesUtil.calendarToDate(recaClave.getPeriodo()), // Date inPeriodo,
                    TypesUtil.calendarToDate(recaClave.getVencimiento()), // Date inFechaVcto,
                    RecaItems.PackTouplesReca(itemsVax), // String inItems,
                    null, // String inItemsCut,
                    null, // BigDecimal inMoneda,
                    deuda.getMontoEnPlazo(), // BigDecimal inMontoPlazo,
                    deuda.getMontoTotal(), // BigDecimal inMontoTotal,
                    deuda.getMontoReajustes(), // BigDecimal inReajustes, 
                    deuda.getMontoIntereses(), // BigDecimal inIntereses, 
                    deuda.getMontoMultas(), // BigDecimal inMultas, 
                    deuda.getMontoCondonacion(), // BigDecimal inCondonaciones, 
                    codigoBarrasVax); // EL CODIGO DE BARRAS SE DEBE GUARDAR SIN GUI0N
            // Tenemos que cambiar el Formulario entregado a la caja en caso de que VAX devuelve 25 o 45
            // Se debe obtener para estos casos el formulario origen, el cual viene informado en el item 20
            // Este cambio fue pedido  por TGR            
            // && !esFrmGiro(formTipo)) Caso de que se pida consultar tambien por 25 o 45
            if (esFrmGiro(deuda.getRecaClave().getFormTipo())) { 
                deuda.getRecaClave().setFormTipo(getFrmOrigenfromItems(itemsVax));
            }
            if (!recaClave.getFormTipo().equals(formTipo)) {
                return consultarAvisoReciboResult;
            }                
            consultarAvisoReciboResult.recaDeuda = deuda;
        } catch (Exception e) {
            consultarAvisoReciboResult.setResultCode(BigDecimal$ONE);
            consultarAvisoReciboResult.setResultMessage(
                    formatException(e, "Excepcion en consultaVaxAR:", true, 0));            
        } finally {
            if (slot != null) {
                slot.release();
            }
        }
        return consultarAvisoReciboResult;
    }
	
    private ConsultarDeudaResult consultaVaxCajaLlave
            (BigDecimal oficinaId,
            String usuario,
            RecaClave claveDeuda,
            boolean recaGeneraCodigoBarra) {
        ConsultarDeudaResult consultarDeudaResult = new ConsultarDeudaResult();

        consultarDeudaResult.setResultCode(ConsultarDeudaResult.TRX_COMPLETED);        
            
        ClientSlot slot = null;        
        int idcPaginacion = 1;
        String crgDataKey = null;
        ArrayList recaDeudasTmp = new ArrayList();
        String arrItemsStr = null;        
        String codigoBarras = null;                      
        int nroItems = 0;  
        int nroDeudas = 0;
        int nroDeudasTotal = 0;
        RecaClave claveDeudaOut = new RecaClave();         
        RecaDeuda recaDeudaOut = new RecaDeuda();                 
        String tablaDeudas = null;
        int largoRegDeuda;
        Message msgLayoutDeuda = new Message();
        TrnAvisoReciboRowtype[] arArr = null;
        TrnAvisoReciboRowtype arType = new TrnAvisoReciboRowtype();
        ArrayList listaArs = new ArrayList();
        int codigoRetorno;
        boolean ctaEsNoLiquidable;

        try {   
            while (idcPaginacion != 0) {
                slot = getLinkSlot();
                
                PkgCajaServicesRemote ejbCajaServices = createPkgCajaServicesRemote();
                GetOficinaDescripcionResult oficinaData = ejbCajaServices.getOficinaDescripcion(
                        oficinaId);         
                Message mensajeIn = new Message();             

                mensajeIn.setLayout(myLink.getLayout("LIQTODOIN"));            
                mensajeIn.setNumber("CRG-RUT-IRA", oficinaData.getOutRutIra());
                mensajeIn.setString("CRG-DV-IRA", oficinaData.getOutRutIraDv());
                mensajeIn.setNumber("CRG-OFICINA",
                        oficinaData.getOutComunaConara());
                mensajeIn.setNumber("CRG-TIP-CONTRIB",
                        claveDeuda.getClienteTipo());
                mensajeIn.setNumber("CRG-RUT-ROL", claveDeuda.getRutRol());
                mensajeIn.setNumber("CRG-TIP-FORM", claveDeuda.getFormTipo());
                mensajeIn.setNumber("CRG-FOLIO", claveDeuda.getFormFolio());  
                mensajeIn.setInteger("CRG-FECVTO",
                        TypesUtil.calendarToInt(claveDeuda.getVencimiento()));                                
                mensajeIn.setInteger("CRG-SW-ENVIO", 0);
                if (crgDataKey == null) {
                    mensajeIn.setString("CRG-DATA-KEY", "");
                    mensajeIn.setInteger("CRG-SW-ENVIO", 0);
                } else {
                    mensajeIn.setString("CRG-DATA-KEY", crgDataKey);
                    mensajeIn.setInteger("CRG-SW-ENVIO", 1);
                }
                mensajeIn.setInteger("CRG-SW-FRM", 2);                   

                Message mensajeOut = slot.sendTransaction("LIQLIN.LIQTODO",
                        mensajeIn, false, false,
                        getTransaccionTimeout("cajaSrv"));

                if (mensajeOut.getReplyCode() != Message.REPLY_ACK) {               
                    throw new Exception(mensajeOut.getData());
                } else if ((codigoRetorno = mensajeOut.getInteger("CRG_RETORNO"))
                        != 0) {   
                    String error = null;

                    switch (codigoRetorno) {
                    case 20:
                        error = errorCode20;
                        throw new Exception(error);

                    case 23:
                        break; // "RUT/ROL no existe";

                    case 24:
                        break; // "RUT/ROL sin deudas"; 

                    case 25:
                        error = errorCode25;
                        throw new Exception(error);                                                                                        

                    case 30: // RUT/ROL SIN DEUDAS                   
                        break; 

                    case 31: // Se lleno LA TABLA HAY MAS DE 7 DEUDAS, SE INDICA CONTINUACION                 
                        break; 

                    case 80:
                        error = errorCode80;
                        throw new Exception(error);                                            

                    default:
                        error = errorCodeDefault + ".("
                                + Integer.toString(codigoRetorno) + ")";
                        throw new Exception(error);
                    }
                }
                // ---------------
                arrItemsStr = null;                
                codigoBarras = null;                      
                nroItems = 0;  
                nroDeudas = 0;
                claveDeudaOut = new RecaClave();         
                recaDeudaOut = new RecaDeuda();                 
                idcPaginacion = mensajeOut.getInteger("CRG-SW-RESPUESTA");
                crgDataKey = mensajeOut.getString("CRG-DATA-KEY");
                nroDeudas = mensajeOut.getInteger("CRG-NRO-DEU");
                tablaDeudas = mensajeOut.getString("CRG-TABLADEU");
                // ---------------
                
                for (int i = 0; i < nroDeudas; i++) {
                    nroDeudasTotal = nroDeudasTotal + 1;                    
                    msgLayoutDeuda.setData(tablaDeudas);
                    msgLayoutDeuda.setLayout(myLink.getLayout("LIQTODODEU"));
                    largoRegDeuda = msgLayoutDeuda.getInteger("D-LARGO-REG");                  
                    if (tablaDeudas.length() > largoRegDeuda) { 
                        tablaDeudas = tablaDeudas.substring(largoRegDeuda);
                    }
                    
                    if (msgLayoutDeuda.getString("D-IDTRANSAC").equals(
                            "NO LIQUIDABLE")) {
                        ctaEsNoLiquidable = true;
                    } else {
                        ctaEsNoLiquidable = false;
                    }

                    // Para esta consulta de la Caja Transaccional no se deben mostrar las deudas no liquidables.
                    if (ctaEsNoLiquidable) {
                        continue;
                    }
                        
                    claveDeudaOut = new RecaClave();
                    claveDeudaOut.setClienteTipo(
                            msgLayoutDeuda.getNumber("D-TIP-CONT"));
                    claveDeudaOut.setRutRol(
                            msgLayoutDeuda.getNumber("D-RUT-ROL"));
                    claveDeudaOut.setRutRolDv(
                            TypesUtil.getDV(claveDeudaOut.getRutRol().toString()));
                    claveDeudaOut.setFormTipo(
                            msgLayoutDeuda.getNumber("D-TIP-FORM"));
                    claveDeudaOut.setFormFolio(
                            msgLayoutDeuda.getNumber("D-FOLIO"));
                    claveDeudaOut.setVencimiento(
                            TypesUtil.intToCalendar(
                                    msgLayoutDeuda.getInteger("D-FECVTO")));
                    claveDeudaOut.setPeriodo(
                            calculaPeriodoVax(claveDeudaOut.getVencimiento(),
                            null));                    
                    recaDeudaOut = new RecaDeuda();
                    recaDeudaOut.setRecaClave(claveDeudaOut);
                    recaDeudaOut.setFechaValidez(
                            TypesUtil.intToCalendar(
                                    msgLayoutDeuda.getInteger("D-FECHA-VALIDEZ")));
                    recaDeudaOut.setFechaEmision(
                            TypesUtil.intToCalendar(
                                    msgLayoutDeuda.getInteger("D-FECEMI")));
                    recaDeudaOut.setFechaLiquidacion(
                            TypesUtil.intToCalendar(
                                    msgLayoutDeuda.getInteger("D-FECLIQ")));
                    recaDeudaOut.setMontoEnPlazo(
                            msgLayoutDeuda.getNumber("D-VALOR-EN-PLAZO"));
                    recaDeudaOut.setMontoIntereses(
                            msgLayoutDeuda.getNumber("D-VALOR-INTERESES"));             
                    recaDeudaOut.setMontoReajustes(
                            msgLayoutDeuda.getNumber("D-VALOR-REAJUSTES"));
                    recaDeudaOut.setMontoCondonacion(
                            msgLayoutDeuda.getNumber("D-VALOR-CONDONACION"));
                    recaDeudaOut.setMontoTotal(
                            msgLayoutDeuda.getNumber("D-VALOR-TOTAL-PAGO"));
                            
                    if (recaGeneraCodigoBarra) { // Cuando Codigo de Barras se genera en RECA entonces codigoBarra=null para que el se autogenere al ingresarlo
                        codigoBarras = null;
                        recaDeudaOut.setAvisoReciboCodigo(codigoBarras);
                        recaDeudaOut.setAvisoReciboFuente(
                                properties$destinoTrx$Aix);
                    } else {
                        codigoBarras = msgLayoutDeuda.getString("D-IDTRANSAC");
                        recaDeudaOut.setAvisoReciboCodigo(codigoBarras);
                        recaDeudaOut.setAvisoReciboFuente(
                                properties$destinoTrx$Vax);
                    }                                          
                   
                    arrItemsStr = msgLayoutDeuda.getString("D-TAB-ITEMS");                    
                    nroItems = msgLayoutDeuda.getInteger("D-NRO-ITEMS");         
                    
                    RecaItemsVax[] itemsVax = getRecaItemsVax(
                            claveDeudaOut.getFormTipo(), arrItemsStr, nroItems);

                    // Guardar AR
                    arType = new TrnAvisoReciboRowtype();
                    arType.setId(null);
                    arType.setFolio(null);
                    arType.setFechaCaja(
                            TypesUtil.calendarToDate(
                                    recaDeudaOut.getFechaLiquidacion())); 
                    arType.setFechaEmision(
                            TypesUtil.calendarToDate(
                                    recaDeudaOut.getFechaEmision()));
                    arType.setFechaValidez(
                            TypesUtil.calendarToDate(
                                    recaDeudaOut.getFechaValidez()));
                    arType.setSistema(prmArSistema$Caja); 
                    arType.setUsuario(usuario);
                    arType.setClienteTipo(claveDeudaOut.getClienteTipo());
                    arType.setRutRol(claveDeudaOut.getRutRol());
                    arType.setRutRolDv(claveDeudaOut.getRutRolDv());
                    arType.setFormCod(claveDeudaOut.getFormTipo());
                    arType.setFormVer(claveDeudaOut.getFormVer());
                    arType.setFormFolio(claveDeudaOut.getFormFolio());
                    arType.setFormFolioDv(null);
                    arType.setPeriodo(
                            TypesUtil.calendarToDate(claveDeudaOut.getPeriodo()));
                    arType.setFechaVcto(
                            TypesUtil.calendarToDate(
                                    claveDeudaOut.getVencimiento()));
                    arType.setItems(RecaItems.PackTouplesReca(itemsVax));
                    arType.setItemsCut(null);
                    arType.setMoneda(null); // TEMPORAL
                    arType.setMontoPlazo(recaDeudaOut.getMontoEnPlazo());
                    arType.setMontoTotal(recaDeudaOut.getMontoTotal());
                    arType.setReajustes(recaDeudaOut.getMontoReajustes());
                    arType.setIntereses(recaDeudaOut.getMontoIntereses());
                    arType.setMultas(recaDeudaOut.getMontoMultas());
                    arType.setCondonaciones(recaDeudaOut.getMontoCondonacion());
                    arType.setCodigoBarra(codigoBarras);
                    listaArs.add(arType);
                    // Tenemos que cambiar el Formulario entregado a la caja en caso de que VAX devuelve 25 o 45
                    // Se debe obtener para estos casos el formulario origen, el cual viene informado en el item 20
                    // Este cambio fue pedido  por TGR            
                    // && !esFrmGiro(formTipo)) Caso de que se pida consultar tambien por 25 o 45
                    if (esFrmGiro(recaDeudaOut.getRecaClave().getFormTipo())) {
                        recaDeudaOut.getRecaClave().setFormTipo(
                                getFrmOrigenfromItems(itemsVax));
                    }           
                    recaDeudasTmp.add(recaDeudaOut);				
                }               
            }           
            // Se ingresa lista completa de ARs con objeto oracle de Listas            
            arArr = arrayListToAvisoReciboArr(listaArs);
            if (arArr != null) {           
                arIngresarListaReca(arArr, recaDeudasTmp);
            }    
            
            consultarDeudaResult.recaDeudaArr = arrayListToRecaDeuda(
                    recaDeudasTmp);
        } catch (Exception e) {   
            consultarDeudaResult.setResultCode(ConsultarDeudaResult.TRX_ERROR);
            consultarDeudaResult.setResultMessage(
                    formatException(e, "Excepcion en consultaVaxCajaLlave:",
                    true, 0));
        } finally {
            if (slot != null) {
                slot.release();
            }
        }	
        return consultarDeudaResult;	
    }
	
    private ConsultarDeudaResult consultaRecaDeudas
            (String usuario,
            BigDecimal oficinaId,
            RecaClave clave) {
        ConsultarDeudaResult consultarDeudaResult = new ConsultarDeudaResult();        
        RecaDeuda recaDeuda;
        RecaClave recaClave;       
        BigDecimal liqRetCode;   
        boolean recaGeneraCodigoBarra = true;  
        RecaItems[] items;
        String sistemaIncobrables;
                
        consultarDeudaResult.setResultCode(ConsultarDeudaResult.TRX_COMPLETED);
        consultarDeudaResult.setResultMessage("OK");
        try {	
            ConsultaDeudaCajaRsResult result = consultaDeudaCajaRs(
                    clave.getClienteTipo(), clave.getRutRol(),
                    clave.getRutRolDv(), clave.getFormTipo(), clave.getFormVer(),
                    clave.getFormFolio(),
                    TypesUtil.calendarToDate(clave.getVencimiento()),
                    TypesUtil.calendarToDate(clave.getPeriodo()));       
            RowSet rowSet = result.getRowSet(0);
            ArrayList recaDeudasTmp = new ArrayList();	
            
            //Debemos ver el sistema que calcula las deudas incobrables.
            try
            {
                sistemaIncobrables = getSistemaIncobrables().getReturnValue();
            }
            catch (Exception e )
            {
                sistemaIncobrables = "VAX";
            }   
                		

            rowSet.beforeFirst();           
            while (rowSet.next()) {
                liqRetCode = rowSet.getBigDecimal("V_RET_CODE");
                if (!liqRetCode.equals(BigDecimal$ZERO)) {                 
                    continue;
                }
                
                recaClave = new RecaClave();
                recaClave.setClienteTipo(
                        rowSet.getBigDecimal("CUT_CTA$CLIENTE_TIPO"));
                recaClave.setRutRol(rowSet.getBigDecimal("CUT_CTA$RUT_ROL"));
                recaClave.setRutRolDv(rowSet.getString("CUT_CTA$RUT_DV"));
                recaClave.setFormTipo(
                        rowSet.getBigDecimal("CUT_CTA$FORM_ORIGINAL"));
                recaClave.setFormFolio(
                        rowSet.getBigDecimal("CUT_CTA$FORM_FOLIO"));
                recaClave.setVencimiento(
                        TypesUtil.dateToCalendar(
                                rowSet.getDate("CUT_CTA$FECHA_VCTO")));
                recaClave.setPeriodo(
                        TypesUtil.dateToCalendar(
                                rowSet.getDate("CUT_CTA$PERIODO")));                    
                recaDeuda = new RecaDeuda();
                recaDeuda.setRecaClave(recaClave);
                recaDeuda.setFechaValidez(
                        TypesUtil.dateToCalendar(rowSet.getDate("FECHA_LIQ_VIG")));
                recaDeuda.setFechaEmision(Calendar.getInstance());
                recaDeuda.setFechaLiquidacion(
                        TypesUtil.dateToCalendar(
                                rowSet.getDate("CUT_CTA$FECHA_LIQUIDACION")));
                recaDeuda.setMontoEnPlazo(rowSet.getBigDecimal("CAPITAL"));
                recaDeuda.setMontoIntereses(rowSet.getBigDecimal("INTERESES"));             
                recaDeuda.setMontoReajustes(rowSet.getBigDecimal("REAJUSTES"));
                recaDeuda.setMontoMultas(rowSet.getBigDecimal("MULTAS"));
                recaDeuda.setMontoCondonacion(rowSet.getBigDecimal("CONDONA"));
                recaDeuda.setMontoTotal(rowSet.getBigDecimal("MONTO_TOTAL"));
                recaDeuda.setAvisoReciboCodigo(rowSet.getString("CODIGO_BARRA")); 
                                
                // Si se trata de una deuda incobrable entonces debemos de ir a buscar la liquidacion a la VAX
                if (rowSet.getString("CUT_MARCA$INCOBRABLE").equalsIgnoreCase(
                        "S") && sistemaIncobrables.equals("VAX")) {
                                                 
                    ConsultarDeudaResult consultarDeudaVaxResult = consultaVaxCajaLlave(
                            oficinaId, usuario, recaClave, recaGeneraCodigoBarra);
                    RecaDeuda recaDeudaIncobrable = new RecaDeuda();
            
                    if (!consultarDeudaVaxResult.getResultCode().equals(
                            ConsultarDeudaResult.TRX_COMPLETED)) {                     
                        throw new Exception(
                                "Error al obtener deuda incobrable VAX. Cut_Cta_id: "
                                        + rowSet.getBigDecimal("CUT_CTA$ID")
                                        + "."
                                        + consultarDeudaVaxResult.getResultMessage());
                    }                    
                     
                    if (consultarDeudaVaxResult.recaDeudaArr == null
                            || consultarDeudaVaxResult.recaDeudaArr.length == 0) {

                        /*
                         throw new Exception(
                         "Error al obtener deuda incobrable VAX. Cut_Cta_id: "
                         + rowSet.getBigDecimal("CUT_CTA$ID")
                         + ". No se encontro Deuda");
                         */
                        // Sino encontramos la deuda incobrable entonces no debemos retornar la deuda
                        // Salimos del loop
                        continue;
                    }
                    
                    if (consultarDeudaVaxResult.recaDeudaArr.length > 1) {
                        throw new Exception(
                                "Error al obtener deuda incobrable VAX. Cut_Cta_id: "
                                        + rowSet.getBigDecimal("CUT_CTA$ID")
                                        + ". Se encontro mas de una deuda para la consulta");
                    }                            
                
                    recaDeudaIncobrable = consultarDeudaVaxResult.recaDeudaArr[0];
                    recaDeuda.setFechaValidez(
                            recaDeudaIncobrable.getFechaValidez());
                    recaDeuda.setMontoEnPlazo(
                            recaDeudaIncobrable.getMontoEnPlazo());
                    recaDeuda.setMontoIntereses(
                            recaDeudaIncobrable.getMontoIntereses());             
                    recaDeuda.setMontoReajustes(
                            recaDeudaIncobrable.getMontoReajustes());
                    recaDeuda.setMontoMultas(
                            recaDeudaIncobrable.getMontoMultas());
                    recaDeuda.setMontoCondonacion(
                            recaDeudaIncobrable.getMontoCondonacion());
                    recaDeuda.setMontoTotal(recaDeudaIncobrable.getMontoTotal());
                    recaDeuda.setAvisoReciboCodigo(
                            recaDeudaIncobrable.getAvisoReciboCodigo());                
                }                                  
                
                recaDeudasTmp.add(recaDeuda);                  
            }           
            consultarDeudaResult.recaDeudaArr = arrayListToRecaDeuda(
                    recaDeudasTmp);           
            
        } catch (Exception e) {
            consultarDeudaResult.setResultCode(ConsultarDeudaResult.TRX_ERROR);
            consultarDeudaResult.setResultMessage(
                    formatException(e, "Excepcion en consultaRecaDeudas:", true,
                    0));                    
        }	
        
        return consultarDeudaResult;
    }
	
    private PagoResult pagoArVax
            (BigDecimal  oficinaId,            
            String avisoReciboCodigo,
            BigDecimal folioF01,
            Calendar fechaPago,
            BigDecimal montoPagado,
            boolean ingresoForzado,
            String terminal,
            Calendar turnoInicio,
            BigDecimal operacionFolio,
            BigDecimal operacionSecuencia) {
        ClientSlot slot = null;
        PagoResult resultPagoArVax = new PagoResult();
        int codigoRetorno = 0;
        BigDecimal rutIra = null;
        String rutIraDv = null;

        try {
            slot = getLinkSlot();

            PkgCajaServicesRemote ejbCajaServices = createPkgCajaServicesRemote();
            BigDecimal oficinaConara = BigDecimal$ZERO;			

            if (oficinaId != null) {
                GetOficinaDescripcionResult oficinaData = ejbCajaServices.getOficinaDescripcion(
                        oficinaId);

                rutIra = oficinaData.getOutRutIra();
                rutIraDv = oficinaData.getOutRutIraDv();
                oficinaConara = oficinaData.getOutComunaConara();
            }

            Message mensajeIn = new Message();

            mensajeIn.setLayout(myLink.getLayout("CARTESOIN"));
            mensajeIn.setNumber("CRG_RUT_IRA", rutIra);
            mensajeIn.setString("CRG_DV_IRA", rutIraDv);
            mensajeIn.setNumber("CRG_OFICINA", oficinaConara);
            mensajeIn.setString("CRG_CODBARRA", avisoReciboCodigo);
            mensajeIn.setNumber("CRG_FOLIO01", folioF01);
            mensajeIn.setInteger("CRG_FECHA_CAJA",
                    TypesUtil.calendarToInt(fechaPago));
            mensajeIn.setNumber("CRG_TOTAL_PAGADO", montoPagado);
            mensajeIn.setString("CRG_TURNOINI",
                    TypesUtil.formateaCalendar(turnoInicio));
            mensajeIn.setString("CRG_TTI", terminal);
            mensajeIn.setString("CRG_TICKET",
                    Long.toString(operacionFolio.longValue()));
            mensajeIn.setString("CRG_SECINSTRU",
                    Long.toString(operacionSecuencia.longValue()));
            mensajeIn.setInteger("CRG_HORA_NOTIF",
                    TypesUtil.extraeHora(fechaPago));	
            if (ingresoForzado) {
                mensajeIn.setInteger("CRG_SW_OPERACION", 1);
            } else {
                mensajeIn.setInteger("CRG_SW_OPERACION", 0);
            }
            writeConsole(mensajeIn.getData());

            Message mensajeOut = slot.sendTransaction("TESGIR.CARGATESO",
                    mensajeIn, false, false, getTransaccionTimeout("cajaSrv"));

            if (mensajeOut.getReplyCode() != Message.REPLY_ACK) {               
                throw new Exception(mensajeOut.getData());
            } else if ((codigoRetorno = Integer.parseInt(
                    mensajeOut.getString("COD_RET")))
                            != 0) {   
                String error;                

                switch (codigoRetorno) {
                case 20:
                    error = errorCode20;
                    break;

                case 23:
                    error = errorCode23AR;
                    break;

                default:
                    error = errorCodeDefault + " (."
                            + Integer.toString(codigoRetorno) + ")";
                    break;
                }
                resultPagoArVax.setResultCode(BigDecimal$ONE);
                resultPagoArVax.setResultMessage(errorPagoARVax + error);
            } else {
                resultPagoArVax.setResultCode(BigDecimal$ZERO);
                
                if (mensajeOut.getString("MSJ_RET")!= null)
                    resultPagoArVax.setResultMessage(mensajeOut.getString("MSJ_RET"));
                else    
                    resultPagoArVax.setResultMessage(mensajeOut.getString("OK"));
            }
        } catch (Exception e) {
            resultPagoArVax.setResultCode(ProcesaTrnSafResult.evaluateTrnSafException(e));
            resultPagoArVax.setResultMessage(
                    formatException(e, errorPagoARVax, true, 0));
        } finally {
            if (slot != null) {
                slot.release();
            }
        }
        return resultPagoArVax;
    }   

    private PagoResult reversaArVax
            (BigDecimal  oficinaId,
            String avisoReciboCodigo,
            BigDecimal folioF01,
            Calendar fechaPago,
            BigDecimal montoPagado,
            boolean ingresoForzado,
            String terminal,
            Calendar turnoInicio,
            BigDecimal operacionFolio,
            BigDecimal operacionSecuencia) {	
        ClientSlot slot = null;
        PagoResult resultReversaArVax = new PagoResult();
        int codigoRetorno = 0;

        try {
            slot = getLinkSlot();

            PkgCajaServicesRemote ejbCajaServices = createPkgCajaServicesRemote();
            GetOficinaDescripcionResult oficinaData = ejbCajaServices.getOficinaDescripcion(
                    oficinaId);
            Message mensajeIn = new Message();

            mensajeIn.setLayout(myLink.getLayout("CARTESOIN"));
            mensajeIn.setNumber("CRG_RUT_IRA", oficinaData.getOutRutIra());
            mensajeIn.setString("CRG_DV_IRA", oficinaData.getOutRutIraDv());
            mensajeIn.setNumber("CRG_OFICINA", oficinaData.getOutComunaConara());
            mensajeIn.setString("CRG_CODBARRA", avisoReciboCodigo);
            mensajeIn.setNumber("CRG_FOLIO01", folioF01);
            mensajeIn.setInteger("CRG_FECHA_CAJA",
                    TypesUtil.calendarToInt(fechaPago));
            mensajeIn.setNumber("CRG_TOTAL_PAGADO", montoPagado);
            mensajeIn.setString("CRG_TURNOINI",
                    TypesUtil.formateaCalendar(turnoInicio));
            mensajeIn.setString("CRG_TTI", terminal);
            mensajeIn.setString("CRG_TICKET",
                    Long.toString(operacionFolio.longValue()));
            mensajeIn.setString("CRG_SECINSTRU",
                    Long.toString(operacionSecuencia.longValue()));
            mensajeIn.setInteger("CRG_HORA_NOTIF",
                    TypesUtil.extraeHora(fechaPago));	
            if (ingresoForzado) {
                mensajeIn.setInteger("CRG_SW_OPERACION", 1);
            } else {
                mensajeIn.setInteger("CRG_SW_OPERACION", 0);
            }
            writeConsole(mensajeIn.getData());

            Message mensajeOut = slot.sendTransaction("TESGIR.REVERSA",
                    mensajeIn, false, false, getTransaccionTimeout("cajaSrv"));

            if (mensajeOut.getReplyCode() != Message.REPLY_ACK) {               
                throw new Exception(mensajeOut.getData());
            } else if ((codigoRetorno = Integer.parseInt(
                    mensajeOut.getString("COD_RET")))
                            != 0) {                 
                String error;               

                switch (codigoRetorno) {
                case 20:
                    error = errorCode20;
                    break;

                case 23:
                    error = errorCode23AR;
                    break;

                default:
                    error = errorCodeDefault + " (."
                            + Integer.toString(codigoRetorno) + ")";
                    break;
                }
                resultReversaArVax.setResultCode(BigDecimal$ONE);
                resultReversaArVax.setResultMessage(errorReversaARVax + error);
            } else {
                resultReversaArVax.setResultCode(BigDecimal$ZERO);
                resultReversaArVax.setResultMessage(
                        mensajeOut.getString("MSJ_RET"));
            }
        } catch (Exception e) {
            resultReversaArVax.setResultCode(ProcesaTrnSafResult.evaluateTrnSafException(e));            
            resultReversaArVax.setResultMessage(
                    formatException(e, "Excepcion en reversaArVax:", true, 0));
        } finally {
            if (slot != null) {
                slot.release();
            }
        }	
        return resultReversaArVax;
    }
		
    private PagoResult pagoDpsVax     
            (BigDecimal  oficinaId,
            String avisoReciboCodigo,
            BigDecimal folioF01,
            Calendar fechaPago,
            BigDecimal montoPagado,
            String terminal,
            Calendar turnoInicio,
            BigDecimal operacionFolio,
            BigDecimal operacionSecuencia,
            String itemsCutStr
            ) {
        ClientSlot slot = null;
        PagoResult resultPagoDps = new PagoResult();
        int codigoRetorno = 0;                     
        LinkedHashMap itemsCut = null;               
        RecaDeuda recaDeuda;
        RecaClave recaClave;
        RecaItems[] recaItems;
        boolean esCajaRezagada;
        
        try {
            boolean esConsultaDeuda = false; // parametro ocupado en consultarAr   
            ConsultarAvisoReciboResult consultarAvisoReciboResult = consultarAr(
                    avisoReciboCodigo, null, null, esConsultaDeuda);       

            recaDeuda = consultarAvisoReciboResult.recaDeuda;      
            recaClave = consultarAvisoReciboResult.recaDeuda.getRecaClave();
            recaItems = recaDeuda.getRecaItems();

            /* FGM 20110518. Ahora sacamos los items CUT del SAF no de la TRN_AVISO_RECIBO
            
            ProcesarADFResult procesarADFResult = callProcesarADF(
                    recaClave.getFormTipo(), recaClave.getFormVer(), recaItems);

            //itemsCutStr = procesarADFResult.itemsCut;    				
            
            */
            
            esCajaRezagada = consultarAvisoReciboResult.esCajaRezagada;	
        } catch (Exception e) {
            resultPagoDps.setResultCode(PagoResult.TRX_ERROR);
            resultPagoDps.setResultMessage(
                    formatException(e, "Error en busqueda de AR", true, 0));              
            return resultPagoDps;
        } 
        try {           
        	PkgCajaServicesRemote ejbCajaServices = createPkgCajaServicesRemote();
            GetOficinaDescripcionResult oficinaData = ejbCajaServices.getOficinaDescripcion(
                    oficinaId);            

            slot = getLinkSlot();            
            
            Message mensajeIn = new Message();

            mensajeIn.setLayout(myLink.getLayout("CARGADPS"));		
            mensajeIn.setNumber("CRG_RUT_IRA", oficinaData.getOutRutIra());
            mensajeIn.setString("CRG_DV_IRA", oficinaData.getOutRutIraDv());
            mensajeIn.setNumber("CRG_OFICINA", oficinaData.getOutComunaConara());
            mensajeIn.setNumber("CRG_FOLIO01", folioF01);
            if (esCajaRezagada) {
                mensajeIn.setInteger("CRG_FECHA_CAJA",
                        TypesUtil.calendarToInt(recaDeuda.getFechaLiquidacion()));
            } else {
                mensajeIn.setInteger("CRG_FECHA_CAJA",
                        TypesUtil.calendarToInt(fechaPago));
            } // TypesUtil.calendarToInt(recaDeuda.getFechaLiquidacion()));            
            mensajeIn.setNumber("CRG_TOTAL_PAGADO", montoPagado);
            mensajeIn.setString("CRG_TURNOINI",
                    TypesUtil.formateaCalendar(turnoInicio));
            mensajeIn.setString("CRG_TTI", terminal);
            if (operacionFolio != null) {
                mensajeIn.setString("CRG_TICKET",
                        Long.toString(operacionFolio.longValue()));
            }
            if (operacionSecuencia != null) {                    
                mensajeIn.setString("CRG_SECINSTRU",
                        Long.toString(operacionSecuencia.longValue()));
            }		
            mensajeIn.setNumber("D_FOLIO_01", folioF01);
            mensajeIn.setNumber("D_RUT_BCO", oficinaData.getOutRutIra());
            mensajeIn.setString("D_DV_BCO", oficinaData.getOutRutIraDv());
            mensajeIn.setNumber("D_TIP_FORM", recaClave.getFormTipo());
            if (recaClave.getPeriodo() != null) {
                String periodo8Str = TypesUtil.rellenaCerosIzquierda(
                        String.valueOf(
                                TypesUtil.calendarToInt(recaClave.getPeriodo())),
                                8);
                        
                String periodo6Str = periodo8Str.substring(0, 6);

                mensajeIn.setString("D_PERIODO", periodo6Str); 
            }
            mensajeIn.setNumber("D_FOLIO", recaClave.getFormFolio());
            mensajeIn.setString("D_SIGNO_DCL", "+");
            mensajeIn.setInteger("CRG_HORA_NOTIF",
                    TypesUtil.extraeHora(fechaPago));	
	        
            //Items
            itemsCut = new TuplasVax().SplitTouplesCutVax(itemsCutStr);
            int i = 0;
            BigDecimal key = null;
            ArrayList listaValores = null;
            String layoutCodigo = "D_ITM_CODIGO";
            String layoutValor = "D_ITM_VALOR";
            String layoutSigno = "D_ITM_SIGNO";

            for (Iterator setIter = itemsCut.keySet().iterator(); setIter.hasNext();) {
                key = (BigDecimal) setIter.next();
                listaValores = (ArrayList) itemsCut.get(key);
		
                Iterator iter = listaValores.iterator();

                while (iter.hasNext()) {
                    TipoDatoCut tmp = (TipoDatoCut) iter.next();

                    i = addVaxItemtoMessage(mensajeIn, i, layoutCodigo,
                            key.intValue(), layoutValor, tmp.valor, layoutSigno,
                            tmp.signo);
                }
            }

            /* --------------------------------
             Se inserta item 9924 con valor de numero de avisoReciboCodigo, como id para reversar en VAX
             ----------------------------------*/
		            
            i = addVaxItemtoMessage(mensajeIn, i, layoutCodigo, 9924,
                    layoutValor, avisoReciboCodigo, layoutSigno, "+"); 
            // Esto lo hice para evitar que el trim del eculink.jar se comiera los espacios del ultimo item.
            mensajeIn.setString("D_ITM_SIGNO", i, "+");
                                
            mensajeIn.setInteger("D_NRO_ITM", i);	
		
            Message mensajeOut = slot.sendTransaction("TESGIR.CARGADPS",
                    mensajeIn, false, false, getTransaccionTimeout("cajaSrv"));

            if (mensajeOut.getReplyCode() != Message.REPLY_ACK) {               
                throw new Exception(mensajeOut.getData());
            } else if ((codigoRetorno = Integer.parseInt(
                    mensajeOut.getString("COD_RET")))
                            != 0) {                
                String error;                

                switch (codigoRetorno) {
                case 20:
                    error = errorCode20;
                    break;

                case 23:
                    error = errorCode23AR;
                    break;

                default:
                    error = errorCodeDefault + " (."
                            + Integer.toString(codigoRetorno) + ")";
                    break;
                }                	 
                resultPagoDps.setResultCode(PagoResult.TRX_ERROR);
                resultPagoDps.setResultMessage(errorPagoARVax + error);
                return resultPagoDps; 
            } else {
                resultPagoDps.setResultCode(PagoResult.TRX_COMPLETED);
                if (mensajeOut.getString("MSJ_RET")!= null)
                    resultPagoDps.setResultMessage(mensajeOut.getString("MSJ_RET"));
                else    
                    resultPagoDps.setResultMessage(mensajeOut.getString("OK"));
            }        
        } catch (Exception e) {
            resultPagoDps.setResultCode(ProcesaTrnSafResult.evaluateTrnSafException(e));
            resultPagoDps.setResultMessage(
                    formatException(e, errorPagoARVax, true, 0));                          
        } finally {
            if (slot != null) {
                slot.release();
            }
        }	
        return resultPagoDps;
    }	   
    
    // FGM 20100422. Se implemente envio de transacciones a VAX  mediante tabla TRN_SAF
    private PagoResult pagoReversaArRecaCaja
            (String user,
            boolean esReversa,
            BigDecimal  oficinaId,            
            String codigoBarra,
            BigDecimal folioF01,
            Calendar fechaPago,            
            String terminal,
            Calendar turnoInicio,
            BigDecimal operacionFolio,
            BigDecimal operacionSecuencia,
            MedioPago medioPago,
            BigDecimal montoPagado,
            Boolean ingresoForzado,
            String pagoVaxStr) {
        PagoResult result = new PagoResult();        

        try {
        	PkgCajaServicesRemote ejbCajaServices = createPkgCajaServicesRemote();
            GetOficinaDescripcionResult oficinaData = ejbCajaServices.getOficinaDescripcion(
                    oficinaId);
            BigDecimal rutIra = oficinaData.getOutRutIra();
            BigDecimal comunaConara = oficinaData.getOutComunaConara();
            String rutIraDv = oficinaData.getOutRutIraDv();
            String turnoInicioStr = TypesUtil.formateaCalendar(turnoInicio);
            String operacionFechaStr = TypesUtil.formateaCalendar(fechaPago);

            /* el IdOrigen de la transaccion se forma de la siguiente forma:
             01+
             (ultimos 5 caracteres del terminal)+   
             (ultimos 5 digitos del folio)+
             (ultimos 4 digitos de la secuencia)+
             (formatea la fecha pago; AAMMDDHHSS)
             */
            String idOrigen = idServicioCaja + TypesUtil.subtrRight(terminal, 5)
                    + TypesUtil.subtrRight(operacionFolio.toString(), 5)
                    + TypesUtil.subtrRight(operacionSecuencia.toString(), 4)
                    + TypesUtil.formateaCalendar2(fechaPago);

            //idOrigen = TypesUtil.subtrRight(idOrigen, 20);                    

            String esReversaStr;

            if (esReversa) {
                esReversaStr = "S";
                //Anteponemos R a id origen de las reversas para evitar duplicacion. Caja envia mismo id para pago que para reversa.
                idOrigen = "R"+ idOrigen;
            } else {
                esReversaStr = "N";
            }
                
            String medioPagoStr = null;

            if (medioPago != null) {
                medioPagoStr = medioPago.nemo;
            }
            
            String ingresoForzadoStr;

            if (ingresoForzado == null || ingresoForzado.booleanValue()) {
                ingresoForzadoStr = "S";
            } else {
                ingresoForzadoStr = "N";
            }
            
            ArPagarCajaResult arPagarCajaResult = arPagarCaja(user, // String inUser,
                    rutIra, // BigDecimal inRutIra,
                    rutIraDv, // String inRutIraDv,
                    codigoBarra, // String inCodigoBarra,
                    idOrigen, // String inIdOrigen,
                    null, // String inPaquete,
                    null, // String inRuta,
                    folioF01, // BigDecimal inFolioF01,
                    TypesUtil.calendarToDate(fechaPago), // Date inFechaOrigen,
                    prmLoteCanal$CajaTgr, // BigDecimal inLoteCanal,
                    prmLoteTipo$Pagos, // BigDecimal inLoteTipo,
                    null, // BigDecimal inCutMovEstado,
                    esReversaStr, // String inEsReversa
                    null, // frmOpcion
                    null, // fmtDataErr
                    operacionFechaStr, // String operacionFecha
                    turnoInicioStr, // String inTurno,
                    terminal, // String inTerminal,
                    operacionFolio, // String inTicket,
                    operacionSecuencia, // String inSecInstrum,
                    medioPagoStr, // String inMedioPago
                    montoPagado, // BigDecimal montoPagado
                    comunaConara, // BigDecimal inComuna,
                    ingresoForzadoStr, // String ingresoForzadoStr
                    oficinaId, // String inTesoreriaAbif
                    pagoVaxStr// Char 
                    ); 
                    
            result.setResultCode(arPagarCajaResult.getOutErrlvl());	
            
            RecaMensajes[] recaMensajes = getMensajesFromRowSet(
                    arPagarCajaResult.getRowSet(0));        

            result.setResultMessage(
                    arPagarCajaResult.getOutMensajes() + "/Mensajes: "
                    + RecaMensajes.packRecaMensajes(recaMensajes));                                       
            
        } catch (Exception e) {            
            result.setResultCode(PagoResult.TRX_ERROR);
            result.setResultMessage(
                    formatException(e, errorPagoAROracle, true, 0));            
        }
        return result;
    }    
      
    private class ProcesarADFResult {
        public String itemsCut;
        public ContextADF contextADF;
        public ContextADF createContextAdf
                () {
            return new ContextADF();
        }    
        public class ContextADF {
            public BigDecimal montoPagar;
        }    
    }    
    private ProcesarADFResult callProcesarADF
            (BigDecimal formTipo,
            String formVer,
            RecaItems[] items) throws Exception {
        ProcesarADFResult procesarADFResult = new ProcesarADFResult();
        String itemsCutStr; 
        String contextTgf;
        String messagesADF;
        BigDecimal errLvl;   
            
        try {           
            DateFormat format1 = new SimpleDateFormat("yyyyMMdd");	  
            String fechaHoy = format1.format(new java.util.Date()).toString();	   
            String contextTGF = TypesUtil.addCharCS("fecha_caja")
                    + TypesUtil.addCharLS(fechaHoy);

            contextTGF = contextTGF + TypesUtil.addCharCS("form_cod")
                    + TypesUtil.addCharLS(formTipo.toString()); 
            contextTGF = contextTGF + TypesUtil.addCharCS("form_ver")
                    + TypesUtil.addCharLS(formVer); 
            contextTGF = contextTGF + TypesUtil.addCharCS("form_vig")
                    + TypesUtil.addCharLS(fechaHoy);             
            contextTGF = contextTGF + TypesUtil.addCharCS("trace_lvl")
                    + TypesUtil.addCharLS("2"); 
            contextTGF = contextTGF + TypesUtil.addCharCS("flag_digitacion")
                    + TypesUtil.addCharLS("1"); 
            TypesUtil.addCharRS(contextTGF); 

            PkgCajaServicesRemote ejbCajaServices = createPkgCajaServicesRemote(); 	
            ProcesarResult result = ejbCajaServices.procesar(
                    RecaItems.PackTouplesReca(items), contextTGF);
                    
            errLvl = result.getResultado();
            messagesADF = result.getMessagestgf();                   
            
            if (errLvl.intValue() > 3) {
                throw new Exception(TypesUtil.recortaString(messagesADF, 256));
            }

            itemsCutStr = result.getItemsOut();
            contextTgf = result.getContexttgfout();            
            
            ProcesarADFResult.ContextADF contextADF = procesarADFResult.new ContextADF();            
            
            String splitPattern = LS + "|" + RS;
            String[] contexto = contextTgf.split(splitPattern);

            for (int x = 0; x < contexto.length; x++) {
                if (contexto[x].toLowerCase().startsWith("lq_a_pagar")) {
                    splitPattern = CS + "|" + RS;

                    String[] liquida = contexto[x].split(splitPattern);

                    contextADF.montoPagar = TypesUtil.parseBigDecimal(liquida[1]);
                }			
            }
            procesarADFResult.itemsCut = itemsCutStr;
            procesarADFResult.contextADF = contextADF;
        } catch (Exception e) {    
            throw new Exception(formatException(e, "callProcesarADF", true, 0));             
        }    
        return  procesarADFResult;
    }		
    private class PagoADFResult extends ProcesarADFResult {        
        public String itemsPago;           
    }    
    
    // -------------------------------------------------------------------------------------------------
    
    
     
    /*
     String packCheque (Cheque cheque,Calendar fechaCheque,BigDecimal monto)
     {
     try
     {
     String chequeStr="";
     if (fechaCheque!=null)
     chequeStr= chequeStr+TypesUtil.addCharCS("fecha")+TypesUtil.addCharLS(Integer.toString(TypesUtil.calendarToInt(fechaCheque)));
     if (cheque.banco!=null)
     chequeStr= chequeStr+TypesUtil.addCharCS("banco")+TypesUtil.addCharLS(cheque.banco.toString());
     if (cheque.plaza!=null)
     chequeStr= chequeStr+TypesUtil.addCharCS("plaza")+TypesUtil.addCharLS(cheque.plaza.toString());
     chequeStr= chequeStr+TypesUtil.addCharCS("cuenta")+TypesUtil.addCharLS("0");
     if (cheque.serie!=null)
     chequeStr= chequeStr+TypesUtil.addCharCS("serie")+TypesUtil.addCharLS(cheque.serie.toString());
     if (monto!=null)
     chequeStr= chequeStr+TypesUtil.addCharCS("monto")+TypesUtil.addCharLS(monto.toString());
     TypesUtil.addCharRS(chequeStr);
     
     return chequeStr;
     }
     catch (Exception e)
     {
     return null;
     }	
     }
     
     TrnTranChequeRowtype packCheque (Cheque cheque,BigDecimal monto)
     {
     TrnTranChequeRowtype result=null;
     
     try
     {
     result =new TrnTranChequeRowtype();
     result.setFecha(cheque.fecha.getTime());
     result.setBanco(cheque.banco);
     result.setPlaza(cheque.plaza);
     result.setCuenta(cheque.cuenta);
     result.setSerie(cheque.serie);
     result.setMonto(monto);
     return result;
     }
     catch (Exception e)
     {
     return null;
     }
     }
     
     TrnTranTarjetaRowtype packTarjeta (Tarjeta tarjeta,BigDecimal monto)
     {
     TrnTranTarjetaRowtype result=null;
     
     try
     {
     result =new TrnTranTarjetaRowtype();
     result.setTarjetaTipo(BigDecimal$ZERO);
     result.setTarjetaMarca(tarjeta.tarjetaMarca);
     result.setAutFecha(tarjeta.autorizadorFecha.getTime());
     result.setAutTipo(tarjeta.autorizadorTipo);
     result.setAutCodigo(tarjeta.autorizadorCodigo);
     result.setCuotaTipo(tarjeta.cuotaTipo);
     result.setCuotaNumero(tarjeta.cuotaNumero);
     result.setMonto(monto);
     return result;
     }
     catch (Exception e)
     {
     return null;
     }
     }*/
	
    
   

    //TODO properties
    protected ClientSlot getLinkSlot
            () throws Exception {
        if (myLink == null || !myLink.isAlive()) {
            Properties props = ClientLink.loadProperties("CajaSrvEculink.properties");
            String ecuIpPort = props.getProperty("eculink.ipport");
            String clientSuffix = props.getProperty("client.suffix");
            String weblogicName = System.getProperty("weblogic.Name");
            String clientName = weblogicName + clientSuffix;
            String layoutsURL = props.getProperty("client.layoutsurl");

            myLink = ClientLink.create(clientName, ecuIpPort, layoutsURL);
        }
        return myLink.newSlot();
    }

    private PkgCajaServicesRemote createPkgCajaServicesRemote
            () throws Exception {
           cargarProperties();
  		   if (pkgCajaServicesRemote == null) {
  		    Context ctx = new InitialContext();
  		    // pkgCajaServicesRemote = (PkgCajaServicesRemote) ctx
            //           .lookup("java:global/CajaSrvEAR/PkgCajaServicesEJB/PkgCajaServices!cl.teso.reca.cajasrv.pkgcajaservices.PkgCajaServicesRemote");
            pkgCajaServicesRemote = (PkgCajaServicesRemote) ctx
                      .lookup(JNDI_EJB_PKGCAJASERVICESREMOTE);
  		   }

  		    return pkgCajaServicesRemote;

    } 
    //TODO properties
    private String getProperties (String key) throws Exception { 
        Properties props = new Properties();
        FileInputStream fis = new FileInputStream("CajaSrvEculink.properties");

        props.load(fis);
        fis.close();

        String value = props.getProperty(key);

        return value;
    }		
    
    private RecaDeuda[] arrayListToRecaDeuda
            (ArrayList recaDeudasList) throws Exception {
        if (recaDeudasList == null) {
            return null;
        }
        
        int size = recaDeudasList.size();

        if (size == 0) {
            return null;
        }

        RecaDeuda[] result = new RecaDeuda[size];

        for (int i = 0; i < size; i++) {
            result[i] = (RecaDeuda) recaDeudasList.get(i);
            result[i].setAvisoReciboCodigo(
                    formatCodigoBarraDV(result[i].getAvisoReciboCodigo()));
        }	
        return result;
    }	
    
    private String formatException
            (Exception e,
            String method,
            boolean printStackTrace,
            long stackTraceLevel) {
        // Valores por defecto        
        printStackTrace = true;
        stackTraceLevel = 2;

        int messageMaxLength = 500;
        String exceptionMessage;       
        // --------------------
        
        String message = null;

        try {
            exceptionMessage = e.toString();
            if (exceptionMessage.length() > messageMaxLength) {
                exceptionMessage = exceptionMessage.substring(0,
                        messageMaxLength);
            }
            message = (method + " " + exceptionMessage);
            if (stackTraceLevel > 0) {
                StackTraceElement[] stk = e.getStackTrace();            
                String stkElement; 
                int stkIdx = 0;

                for (int j = 0; j < stk.length; j++) {   
                    String thisClassName = "cl.teso.reca.pkgcajaservicestrx"; // MEJORAR                           

                    if (stk[j].getClassName().startsWith(thisClassName)) {
                        stkElement = ". at " + stk[j].getMethodName() + "("
                                + stk[j].getFileName() + ":"
                                + stk[j].getLineNumber() + ")"; 
                        message = message + stkElement;
                        stkIdx = stkIdx + 1;
                    }                    
                    if (stkIdx >= stackTraceLevel) {
                        break;
                    } 
                }    
            }    
            if (printStackTrace) {
                e.printStackTrace();
            }
        } catch (Exception f) {
            message = "Method: " + method + ". Exception: " + e;                   
        }
        return message;    
    }    
    
    private Calendar calculaPeriodoVax
            (Calendar vencimiento,
            BigDecimal formTipo) throws Exception {
        // -------------------------------------------------------------------------------------
        // ******   Aca se calcula el periodo de la Cuenta, el cual no viene informado en la VAX
        // Periodo Cta = Periodo de la fecha de vencimiento (todos los formularios)
        // Periodo Cta = Periodo del mes anterior a la fecha de vencimiento (excepcion para formulario 29)
        if (vencimiento != null) {
            Calendar periodoCta = Calendar.getInstance();    

            periodoCta.setTimeInMillis(vencimiento.getTimeInMillis());			
            periodoCta.set(Calendar.DATE, 1);
            if (formTipo != null && formTipo.equals(new BigDecimal(29))) {
                periodoCta.add(Calendar.MONTH, -1);
            }
            return periodoCta;
        } else {
            return null;
        }	
        // -------------------------------------------------------------------------------------		  
    }   
    
    private TrnAvisoReciboRowtype[] arrayListToAvisoReciboArr
            (ArrayList trnAvisoReciboList) throws Exception {
        if (trnAvisoReciboList == null) {
            return null;
        }
        
        int size = trnAvisoReciboList.size();

        if (size == 0) {
            return null;
        }

        TrnAvisoReciboRowtype[] result = new TrnAvisoReciboRowtype[size];

        for (int i = 0; i < size; i++) {
            result[i] = (TrnAvisoReciboRowtype) trnAvisoReciboList.get(i);
        }	
        return result;
    }
    

	public RecaItemsVax[] formateaRecaItemsVax
            (BigDecimal formTipo,
            RecaItemsVax[] recaItems) throws Exception {
        RecaItemsVax[] itemsTmp = null;
        LinkedHashMap itemsMap = new LinkedHashMap();               
        String valorItemAnt = null;
        String listaValoresStr = null;
        BigDecimal key;
        String[] listaValores;
        RecaItemsVax item;
        int nroItems = 0;
        int k = 0;
        PkgCajaServicesRemote ejbCajaServices = createPkgCajaServicesRemote();
        BigDecimal frmId = null;
        String itemType = "";
        BigDecimal itemTypeCodeBuffer = new BigDecimal(-1);        

        for (int i = 0; i < recaItems.length; i++) {   
            if (!recaItems[i].getCodigo().equals(itemTypeCodeBuffer)) {

                /* Se llama a los metodos getFrmIdSafe y getItemdefSafe, los cuales no arrojan excepcion. Ademas de esto devuelven valor itemType= 'XXXX' en caso de no encontrar formulario o item */
                if (frmId == null) {
                    frmId = ejbCajaServices.getFrmIdSafe(formTipo, null, null).getReturnValue();
                }
                itemType = ejbCajaServices.getItemdefSafe(frmId, recaItems[i].getCodigo()).getOutItemtype();       
            }        
            itemTypeCodeBuffer = recaItems[i].getCodigo();    
            // Formateamos el tipo de dato del Item Vax al tipo de dato utilizado en el RECA(ADF)
            if (recaItems[i].getSigno().equals("-")) {
                recaItems[i].setValor("-" + recaItems[i].getValor());
            }
            if (itemsMap.containsKey(recaItems[i].getCodigo())) {                                
                valorItemAnt = (String) itemsMap.get(recaItems[i].getCodigo());
                if (itemType.trim().equalsIgnoreCase("alfanumerico")) {               
                    itemsMap.put(recaItems[i].getCodigo(),
                            valorItemAnt + recaItems[i].getValor());
                } else {
                    itemsMap.put(recaItems[i].getCodigo(),
                            valorItemAnt + CS + recaItems[i].getValor());                
                    nroItems++;
                }    
            } else {
                itemsMap.put(recaItems[i].getCodigo(), recaItems[i].getValor());             
                nroItems++;
            }    
        }
        itemsTmp = new RecaItemsVax[nroItems];
        for (Iterator setIter = itemsMap.keySet().iterator(); setIter.hasNext();) {
            key = (BigDecimal) setIter.next();
            listaValoresStr = (String) itemsMap.get(key);
            listaValores = listaValoresStr.split(String.valueOf(CS));
            for (int j = 0; j < listaValores.length; j++) {
                item = new RecaItemsVax();  
                item.setCodigo(key);
                item.setValor(listaValores[j]);
                itemsTmp[k] = item; 
                k++; 
            }   
        }
        return itemsTmp;
    }

    private RecaItemsVax[] getRecaItemsVax
            (BigDecimal formTipo,
            String arrItemsStr,
            int nroItems) throws Exception {        
        int itemCodigoLayoutLength = 4;
        int itemSignoLayoutLength = 1; 
        int itemValorLayoutLength = 15; 
        int itemLayoutLength = itemCodigoLayoutLength + itemSignoLayoutLength
                + itemValorLayoutLength;       
        String codValor = null;        
        String codigo = null;
        String signo = null;
        String valor = null;
        RecaItemsVax[] itemsVax = new RecaItemsVax[nroItems];

        try {
            for (int j = 0; j < nroItems; j++) {      
                itemsVax[j] = new RecaItemsVax();
                // largoRegItem = itemCodigoLayoutLength + itemSignoLayoutLength + itemValorLayoutLength;   
                if (arrItemsStr.length() > itemLayoutLength) {
                    codValor = arrItemsStr.substring(0, itemLayoutLength);
                } else {
                    codValor = TypesUtil.rellenaBlancosDerecha(arrItemsStr,
                            itemLayoutLength);
                }        
                codigo = codValor.substring(0, itemCodigoLayoutLength);
                signo = codValor.substring(itemCodigoLayoutLength,
                        itemCodigoLayoutLength + itemSignoLayoutLength);                        
                valor = codValor.substring(
                        itemCodigoLayoutLength + itemSignoLayoutLength,
                        itemLayoutLength);  
                itemsVax[j].setCodigo(new BigDecimal(codigo));
                itemsVax[j].setValor(valor);
                itemsVax[j].setSigno(signo); 
                if (arrItemsStr.length() >= itemLayoutLength) {
                    arrItemsStr = arrItemsStr.substring(itemLayoutLength);
                } else {
                    arrItemsStr = TypesUtil.rellenaBlancosDerecha(arrItemsStr,
                            itemLayoutLength);
                }         
            } 
            // Concatenamos items Alphanumericos repetidos desde VAX
            // String itemVax1=RecaItems.PackTouplesReca(itemsVax);                    
            itemsVax = formateaRecaItemsVax(formTipo, itemsVax); 
        } catch (Exception e) {
            throw new Exception(formatException(e, "getRecaItemsVax", true, 0));
        }
        return itemsVax;
    }
    
    private String getItemCodeFrmOrigen
            (RecaItems[] items) {
        String itemCodeFrmOrigen = null;

        for (int i = 0; i < items.length; i++) {
            if (items[i].getCodigo() != null
                    && items[i].getCodigo().equals(codeFrmOrigen)) {
                itemCodeFrmOrigen = items[i].getValor();
                break;
            }
        }    
        return itemCodeFrmOrigen;
    }    
    
    private BigDecimal getFrmOrigenfromItems
            (RecaItems[] items) throws Exception {
        BigDecimal frmTipo = null;
        String itemCodeFrmOrigen = null; 

        try { 
            itemCodeFrmOrigen = getItemCodeFrmOrigen(items);
            frmTipo = new BigDecimal(itemCodeFrmOrigen);
        } catch (Exception e) {
            throw new Exception(
                    "Error al obtener FrmOrigen. Item " + codeFrmOrigen
                    + " igual a " + itemCodeFrmOrigen);
        }    
        return frmTipo;
    }  

    // Evalua si el formulario es Giro o no
    private boolean esFrmGiro
            (BigDecimal frmCode) throws Exception {
        // Por ahora 25 y 45 en duro�
        if (frmCode != null
                && (frmCode.equals(new BigDecimal(25))
                        || frmCode.equals(new BigDecimal(45)))) {        
            return true;
        } else {
            return false;
        }
    }  
    
    private void writeConsole
            (String msg) {
        if (writeConsole) {
            try {
                Calendar c = Calendar.getInstance();
                String time = TypesUtil.formateaCalendar(c);

                System.out.println("PkgCajaServicesTrx(" + time + "): " + msg);
            } catch (Exception e) {
                System.out.println(msg);   
            }   
        }
    }  
    
    private long getTransaccionTimeout
            (String transaccion) {
        long transactionTimeOut;

        try {
            String timeOut = null;                

            timeOut = getProperties(transaccion + ".vaxTimeout");                               
            transactionTimeOut = Long.parseLong(timeOut) * 1000; // Parametro se de
        } catch (Exception e) {
            throw new LinkException(
                    "Error: No se pudo cargar parametro " + transaccion
                    + ".vaxTimeout" + "de Archivo de Propiedades");
        }          
        return transactionTimeOut;
    } 
    
    private RecaMensajes[] getMensajesFromRowSet
            (RowSet rsMsg) throws Exception {
        RecaMensajes[] recaMensajes = null;

        rsMsg.last();
        recaMensajes = new RecaMensajes[rsMsg.getRow()];

        int i = 0;

        rsMsg.beforeFirst();
        while (rsMsg.next()) {
            recaMensajes[i] = new RecaMensajes();
            recaMensajes[i].setTipo(rsMsg.getBigDecimal("tipo"));
            recaMensajes[i].setCodigo(rsMsg.getBigDecimal("codigo"));
            recaMensajes[i].setSeveridad(rsMsg.getBigDecimal("severidad"));
            recaMensajes[i].setGlosa(rsMsg.getString("glosa"));
            recaMensajes[i].setErrCode(rsMsg.getBigDecimal("errcode"));
            recaMensajes[i].setErrTgr(rsMsg.getBigDecimal("error_tgr"));                
            recaMensajes[i].setErrMsg(rsMsg.getString("errmsg"));
            recaMensajes[i].setObjName(rsMsg.getString("objname"));
            recaMensajes[i].setObjValue(rsMsg.getString("objvalue"));
            recaMensajes[i].setObjDescrip(rsMsg.getString("objdescrip"));
            i = i + 1; 
        } 
        return recaMensajes;
    }  
    
    boolean esArGeneradoReca(String codigoBarra) {   
        // Aca evaluamos los codigos de barras de largo 15
        // Los codigos de barra de largo 15 traen valor 9 en la posicion 12 cuando son generados en el reca
        if (codigoBarra.length() == 15) {
            if (codigoBarra.substring(11, 12).equals("9")) {
                return true;
            } else { 
                return false;
            }            
        } // Aca evaluamos los codigos de barras de largo 25
        // Los codigos de barra de largo 25 traen valor 7 en la posicion 4-6 cuando son generados en la VAX.
        else {
            // FALTA DEFINIR CONDICION PARA EVALUAR ARs DE LARGO 25            
            if (Integer.parseInt(codigoBarra.substring(4, 6)) != 7) {
                return true;
            } else { 
                return false;
            }
            
        }     
        
    }    
    
    private int addVaxItemtoMessage(Message mensajeIn, int idx, String layoutCodigo, int codigo, String layoutValor, String valor, String layoutSigno, String signo) {
        double nrosubstr = Math.ceil((double) valor.length() / 15);                
				
        String valorRecortado = "";
                
        for (int j = 0; j < nrosubstr; j++) {
            if (valor.length() > 15) {
                valorRecortado = valor.substring(0, 15);
            } else {
                valorRecortado = valor;
            }
            if (valor.length() > 15) {
                valor = valor.substring(15);
            }
            mensajeIn.setNumber(layoutCodigo, idx, new BigDecimal(codigo));
            mensajeIn.setString(layoutValor, idx, valorRecortado);
            mensajeIn.setString(layoutSigno, idx, signo);     
            idx = idx + 1;
                        
        }
                
        return idx;
        
    }  
    
    /* Este procedimiento hace el llamado al procedure arIngresarLista con la diferencia que modifica los codigos de barra del objeto inListaAr cuando estos vienen nulos.
     * Asi al ser nulos los codigos son generados en el Reca y retornados por el procedimiento en un arreglo de String, con el cual posteriormente se actualiza la lista inListaAr
     */
    private void arIngresarListaReca(TrnAvisoReciboRowtype[] inListaAr, ArrayList deudaList) throws Exception {
        ArIngresarListaResult arIngresarListaResult = arIngresarLista(inListaAr);
        String[] listaCodigosBarra = arIngresarListaResult.getOutCodigosBarra();
        
        for (int i = 0; i < inListaAr.length; i++) {
            inListaAr[i].setCodigoBarra(listaCodigosBarra[i]);
            ((RecaDeuda) deudaList.get(i)).setAvisoReciboCodigo(
                    listaCodigosBarra[i]);
        }            
    }           
    
    // El codigo de Barras enviador a la Caja lleva un '-' como separador del DV                    
    private String formatCodigoBarraDV(String codigoBarraSinDv) {
        String dvSeparator = "-";        
        String codigoBarraConDv = codigoBarraSinDv;
        String testSeparator = codigoBarraSinDv.substring(
                codigoBarraSinDv.length() - 2, codigoBarraSinDv.length() - 1);

        if (codigoBarraSinDv != null && !testSeparator.equals(dvSeparator)) {
            codigoBarraConDv = codigoBarraSinDv.substring(0,
                    codigoBarraSinDv.length() - 1)
                    + dvSeparator
                    + codigoBarraSinDv.substring(codigoBarraSinDv.length() - 1);
        }
                                        
        return codigoBarraConDv;                                  
    }    
    
    private boolean StringToBooleanSN
            (String booleanStr) {            
                
        if (booleanStr == null || booleanStr.equals("S")) {            
            return true;
        } else {            
            return false;
        }
    }   
       
    private Calendar StringToCalendarYYYYMMDDHHMMSS
            (String calendarStr) throws Exception {        
        Calendar cal = Calendar.getInstance();
        
        String DATE_FORMAT = "yyyy-MM-dd HH:mm:ss";
        SimpleDateFormat sdf = new SimpleDateFormat(DATE_FORMAT);
        Date fecha = sdf.parse(calendarStr);
            
        cal.setTime(fecha);
        return cal;
    }           

    ArConsultarResult arConsultar(String inCodigoBarra, BigDecimal inFolioAr)
        throws PkgCajaServicesTrxException
    {
        try {
            return ArConsultarCaller.execute(dataSource, inCodigoBarra, inFolioAr);
        } catch (Exception ex) {
            setRollbackOnly();
            throw new PkgCajaServicesTrxException(ex);
        }
    }

    ArIngresarResult arIngresar(Date inFechaCaja, Date inFechaEmision, Date inFechaValidez, BigDecimal inSistema, String inUsuario, BigDecimal inClienteTipo, BigDecimal inRutRol, String inRutRolDv, BigDecimal inFormCod, String inFormVer, BigDecimal inFormFolio, String inFormFolioDv, Date inPeriodo, Date inFechaVcto, String inItems, String inItemsCut, BigDecimal inMoneda, BigDecimal inMontoPlazo, BigDecimal inMontoTotal, BigDecimal inReajustes, BigDecimal inIntereses, BigDecimal inMultas, BigDecimal inCondonaciones, String outCodigoBarra)
        throws PkgCajaServicesTrxException
    {
        try {
            return ArIngresarCaller.execute(dataSource, inFechaCaja, inFechaEmision, inFechaValidez, inSistema, inUsuario, inClienteTipo, inRutRol, inRutRolDv, inFormCod, inFormVer, inFormFolio, inFormFolioDv, inPeriodo, inFechaVcto, inItems, inItemsCut, inMoneda, inMontoPlazo, inMontoTotal, inReajustes, inIntereses, inMultas, inCondonaciones, outCodigoBarra);
        } catch (Exception ex) {
            setRollbackOnly();
            throw new PkgCajaServicesTrxException(ex);
        }
    }

    ArIngresarListaResult arIngresarLista(TrnAvisoReciboRowtype[] inListaAr)
        throws PkgCajaServicesTrxException
    {
        try {
            return ArIngresarListaCaller.execute(dataSource, inListaAr);
        } catch (Exception ex) {
            setRollbackOnly();
            throw new PkgCajaServicesTrxException(ex);
        }
    }

    ArPagarCajaResult arPagarCaja(String inUser, BigDecimal inRutIra, String inRutIraDv, String inCodigoBarra, String inIdOrigen, String inPaquete, String inRuta, BigDecimal inFolioF01, Date inFechaOrigen, BigDecimal inLoteCanal, BigDecimal inLoteTipo, BigDecimal inCutMovEstado, String inEsReversa, String inFrmOpcion, String inFmtDataErr, String inOperacionFecha, String inTurno, String inTerminal, BigDecimal inTicket, BigDecimal inSecInstrum, String inMedioPago, BigDecimal inMontoPago, BigDecimal inComuna, String inIngresoForzado, BigDecimal inTesoreriaAbif, String inEnviaTrnSaf)
        throws PkgCajaServicesTrxException
    {
        try {
            return ArPagarCajaCaller.execute(dataSource, inUser, inRutIra, inRutIraDv, inCodigoBarra, inIdOrigen, inPaquete, inRuta, inFolioF01, inFechaOrigen, inLoteCanal, inLoteTipo, inCutMovEstado, inEsReversa, inFrmOpcion, inFmtDataErr, inOperacionFecha, inTurno, inTerminal, inTicket, inSecInstrum, inMedioPago, inMontoPago, inComuna, inIngresoForzado, inTesoreriaAbif, inEnviaTrnSaf);
        } catch (Exception ex) {
            setRollbackOnly();
            throw new PkgCajaServicesTrxException(ex);
        }
    }

    ConsultaDeudaCajaRsResult consultaDeudaCajaRs(BigDecimal inClienteTipo, BigDecimal inRutRol, String inRutRolDv, BigDecimal inFormCod, String inFormVer, BigDecimal inFormFolio, Date inFechaVcto, Date inPeriodo)
        throws PkgCajaServicesTrxException
    {
        try {
            return ConsultaDeudaCajaRsCaller.execute(dataSource, inClienteTipo, inRutRol, inRutRolDv, inFormCod, inFormVer, inFormFolio, inFechaVcto, inPeriodo);
        } catch (Exception ex) {
            setRollbackOnly();
            throw new PkgCajaServicesTrxException(ex);
        }
    }

    GetRegistrosTrnSafResult getRegistrosTrnSaf(BigDecimal inFolioEnvio)
        throws PkgCajaServicesTrxException
    {
        try {
            return GetRegistrosTrnSafCaller.execute(dataSource, inFolioEnvio);
        } catch (Exception ex) {
            setRollbackOnly();
            throw new PkgCajaServicesTrxException(ex);
        }
    }

    GetSistemaIncobrablesResult getSistemaIncobrables()
        throws PkgCajaServicesTrxException
    {
        try {
            return GetSistemaIncobrablesCaller.execute(dataSource);
        } catch (Exception ex) {
            //setRollbackOnly();
            throw new PkgCajaServicesTrxException(ex);
        }
    }

    protected DataSource getDataSource()
    {
        return dataSource;
    }

    /**
     * Returns the context associated with this session bean.
     */
    protected SessionContext getSessionContext()
    {
        return sessionContext;
    }

    /**
     * Roll back the current transaction (if any).
     */
    protected void setRollbackOnly()
    {
        try {
          //  getSessionContext().setRollbackOnly();
        } catch (IllegalStateException ex) {
            // Ignore: there is no active transaction.
        }
    }

    //--------------------------------------------------------------------------
    //-- EJB-required methods --------------------------------------------------
    //--------------------------------------------------------------------------


	public void setSessionContext(SessionContext context)
    {
        sessionContext = context;
    }


	public void ejbCreate() throws CreateException
    {

    }


	public void ejbActivate() {}


	public void ejbPassivate() {}


	public void ejbRemove() {}                 
}
