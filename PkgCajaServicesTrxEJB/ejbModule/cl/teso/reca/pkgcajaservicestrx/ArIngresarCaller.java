/*
 * Source: ArIngresarCaller.java - Generated by OBCOM SQL Wizard 5.1.266
 * Author: Felipe Gonzalez M (DP S.A.)
 *
 * Copyright (c) OBCOM INGENIERIA S.A. (Chile). All rights reserved.
 *
 * All rights to this product are owned by OBCOM INGENIERIA S.A. and may only be
 * used  under  the  terms of its associated license document. You may NOT copy,
 * modify, sublicense, or distribute this source file or portions of  it  unless
 * previously  authorized in writing by OBCOM INGENIERIA S.A. In any event, this
 * notice and above copyright must always be included verbatim with this file.
 */

package cl.teso.reca.pkgcajaservicestrx;

import java.math.BigDecimal;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.SQLException;
import java.sql.Types;
import java.util.ArrayList;
import java.util.Date;
import javax.sql.DataSource;
import javax.sql.RowSet;

/**
 * Implements a caller of procedure "RECA.PKG_CAJA_SERVICES_TRX.AR_INGRESAR".
 * <pre>
 * IN_FECHA_CAJA      DATE               Input
 * IN_FECHA_EMISION   DATE               Input
 * IN_FECHA_VALIDEZ   DATE               Input
 * IN_SISTEMA         NUMBER             Input
 * IN_USUARIO         VARCHAR2(4000)     Input
 * IN_CLIENTE_TIPO    NUMBER             Input
 * IN_RUT_ROL         NUMBER             Input
 * IN_RUT_ROL_DV      CHAR(2000)         Input
 * IN_FORM_COD        NUMBER             Input
 * IN_FORM_VER        CHAR(2000)         Input
 * IN_FORM_FOLIO      NUMBER             Input
 * IN_FORM_FOLIO_DV   CHAR(2000)         Input
 * IN_PERIODO         DATE               Input
 * IN_FECHA_VCTO      DATE               Input
 * IN_ITEMS           VARCHAR2(4000)     Input
 * IN_ITEMS_CUT       VARCHAR2(4000)     Input
 * IN_MONEDA          NUMBER             Input
 * IN_MONTO_PLAZO     NUMBER             Input
 * IN_MONTO_TOTAL     NUMBER             Input
 * IN_REAJUSTES       NUMBER             Input
 * IN_INTERESES       NUMBER             Input
 * IN_MULTAS          NUMBER             Input
 * IN_CONDONACIONES   NUMBER             Input
 * OUT_CODIGO_BARRA   VARCHAR2(4000)     InputOutput
 * OUT_FOLIO_AR       NUMBER             Output
 * </pre>
 */
public class ArIngresarCaller extends ProcedureCaller
{
    /**
     * Executes procedure "RECA.PKG_CAJA_SERVICES_TRX.AR_INGRESAR" using a DataSource.
     */
    public static ArIngresarResult execute(DataSource dataSource, Date inFechaCaja, Date inFechaEmision, Date inFechaValidez, BigDecimal inSistema, String inUsuario, BigDecimal inClienteTipo, BigDecimal inRutRol, String inRutRolDv, BigDecimal inFormCod, String inFormVer, BigDecimal inFormFolio, String inFormFolioDv, Date inPeriodo, Date inFechaVcto, String inItems, String inItemsCut, BigDecimal inMoneda, BigDecimal inMontoPlazo, BigDecimal inMontoTotal, BigDecimal inReajustes, BigDecimal inIntereses, BigDecimal inMultas, BigDecimal inCondonaciones, String outCodigoBarra)
        throws SQLException
    {
        Connection conn = dataSource.getConnection();
        try {
            return execute(conn, inFechaCaja, inFechaEmision, inFechaValidez, inSistema, inUsuario, inClienteTipo, inRutRol, inRutRolDv, inFormCod, inFormVer, inFormFolio, inFormFolioDv, inPeriodo, inFechaVcto, inItems, inItemsCut, inMoneda, inMontoPlazo, inMontoTotal, inReajustes, inIntereses, inMultas, inCondonaciones, outCodigoBarra);
        } finally {
            conn.close();
        }
    }

    /**
     * Executes procedure "RECA.PKG_CAJA_SERVICES_TRX.AR_INGRESAR" using a Connection.
     */
    public static ArIngresarResult execute(Connection conn, Date inFechaCaja, Date inFechaEmision, Date inFechaValidez, BigDecimal inSistema, String inUsuario, BigDecimal inClienteTipo, BigDecimal inRutRol, String inRutRolDv, BigDecimal inFormCod, String inFormVer, BigDecimal inFormFolio, String inFormFolioDv, Date inPeriodo, Date inFechaVcto, String inItems, String inItemsCut, BigDecimal inMoneda, BigDecimal inMontoPlazo, BigDecimal inMontoTotal, BigDecimal inReajustes, BigDecimal inIntereses, BigDecimal inMultas, BigDecimal inCondonaciones, String outCodigoBarra)
        throws SQLException
    {
        ArIngresarResult result = new ArIngresarResult();
        ArrayList resultSets = new ArrayList();
        CallableStatement call = conn.prepareCall("{call RECA.PKG_CAJA_SERVICES_TRX.AR_INGRESAR(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}");
        try {
            call.setTimestamp(1, toTimestamp(inFechaCaja));
            call.setTimestamp(2, toTimestamp(inFechaEmision));
            call.setTimestamp(3, toTimestamp(inFechaValidez));
            call.setBigDecimal(4, inSistema);
            call.setString(5, inUsuario);
            call.setBigDecimal(6, inClienteTipo);
            call.setBigDecimal(7, inRutRol);
            call.setString(8, inRutRolDv);
            call.setBigDecimal(9, inFormCod);
            call.setString(10, inFormVer);
            call.setBigDecimal(11, inFormFolio);
            call.setString(12, inFormFolioDv);
            call.setTimestamp(13, toTimestamp(inPeriodo));
            call.setTimestamp(14, toTimestamp(inFechaVcto));
            call.setString(15, inItems);
            call.setString(16, inItemsCut);
            call.setBigDecimal(17, inMoneda);
            call.setBigDecimal(18, inMontoPlazo);
            call.setBigDecimal(19, inMontoTotal);
            call.setBigDecimal(20, inReajustes);
            call.setBigDecimal(21, inIntereses);
            call.setBigDecimal(22, inMultas);
            call.setBigDecimal(23, inCondonaciones);
            call.setString(24, outCodigoBarra);
            call.registerOutParameter(24, Types.VARCHAR);
            call.registerOutParameter(25, Types.NUMERIC);
            int updateCount = 0;
            boolean haveRset = call.execute();
            while (haveRset || updateCount != -1) {
                if (!haveRset)
                    updateCount = call.getUpdateCount();
                else
                    resultSets.add(toRowSet(call.getResultSet()));
                haveRset = call.getMoreResults();
            }
            result.setOutCodigoBarra(call.getString(24));
            result.setOutFolioAr(call.getBigDecimal(25));
        } finally {
            call.close();
        }
        if (resultSets.size() > 0) {
            RowSet[] rowSets = new RowSet[resultSets.size()];
            result.setRowSets((RowSet[]) resultSets.toArray(rowSets));
        }
        return result;
    }
}
