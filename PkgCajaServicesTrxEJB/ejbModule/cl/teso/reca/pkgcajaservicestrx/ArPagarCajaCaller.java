/*
 * Source: ArPagarCajaCaller.java - Generated by OBCOM SQL Wizard 5.1.266
 * Author: Felipe Gonzalez M (DP S.A.)
 *
 * Copyright (c) OBCOM INGENIERIA S.A. (Chile). All rights reserved.
 *
 * All rights to this product are owned by OBCOM INGENIERIA S.A. and may only be
 * used  under  the  terms of its associated license document. You may NOT copy,
 * modify, sublicense, or distribute this source file or portions of  it  unless
 * previously  authorized in writing by OBCOM INGENIERIA S.A. In any event, this
 * notice and above copyright must always be included verbatim with this file.
 */

package cl.teso.reca.pkgcajaservicestrx;

import java.math.BigDecimal;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Types;
import java.util.ArrayList;
import java.util.Date;
import javax.sql.DataSource;
import javax.sql.RowSet;

/**
 * Implements a caller of procedure "RECA.PKG_CAJA_SERVICES_TRX.AR_PAGAR_CAJA".
 * <pre>
 * IN_USER             VARCHAR2(4000)     Input
 * IN_RUT_IRA          NUMBER             Input
 * IN_RUT_IRA_DV       CHAR(2000)         Input
 * IN_CODIGO_BARRA     VARCHAR2(4000)     Input
 * IN_ID_ORIGEN        VARCHAR2(4000)     Input
 * IN_PAQUETE          VARCHAR2(4000)     Input
 * IN_RUTA             VARCHAR2(4000)     Input
 * IN_FOLIO_F01        NUMBER             Input
 * IN_FECHA_ORIGEN     DATE               Input
 * IN_LOTE_CANAL       NUMBER             Input
 * IN_LOTE_TIPO        NUMBER             Input
 * IN_CUT_MOV_ESTADO   NUMBER             Input
 * IN_ES_REVERSA       CHAR(2000)         Input
 * IN_FRM_OPCION       CHAR(2000)         Input
 * IN_FMT_DATA_ERR     VARCHAR2(4000)     Input
 * IN_OPERACION_FECHA  VARCHAR2(4000)     Input
 * IN_TURNO            VARCHAR2(4000)     Input
 * IN_TERMINAL         VARCHAR2(4000)     Input
 * IN_TICKET           NUMBER             Input
 * IN_SEC_INSTRUM      NUMBER             Input
 * IN_MEDIO_PAGO       VARCHAR2(4000)     Input
 * IN_MONTO_PAGO       NUMBER             Input
 * IN_COMUNA           NUMBER             Input
 * IN_INGRESO_FORZADO  CHAR(2000)         Input
 * IN_TESORERIA_ABIF   NUMBER             Input
 * IN_ENVIA_TRN_SAF    CHAR(2000)         Input
 * OUT_ERRLVL          NUMBER             Output
 * OUT_MENSAJES        VARCHAR2(4000)     Output
 * OUT_CONTEST_ID      VARCHAR2(4000)     Output
 * OUT_RECA_MSG        REF CURSOR         Output
 * OUT_FECHA_CONTABLE  DATE               Output
 * </pre>
 */
public class ArPagarCajaCaller extends ProcedureCaller
{
    /**
     * Executes procedure "RECA.PKG_CAJA_SERVICES_TRX.AR_PAGAR_CAJA" using a DataSource.
     */
    public static ArPagarCajaResult execute(DataSource dataSource, String inUser, BigDecimal inRutIra, String inRutIraDv, String inCodigoBarra, String inIdOrigen, String inPaquete, String inRuta, BigDecimal inFolioF01, Date inFechaOrigen, BigDecimal inLoteCanal, BigDecimal inLoteTipo, BigDecimal inCutMovEstado, String inEsReversa, String inFrmOpcion, String inFmtDataErr, String inOperacionFecha, String inTurno, String inTerminal, BigDecimal inTicket, BigDecimal inSecInstrum, String inMedioPago, BigDecimal inMontoPago, BigDecimal inComuna, String inIngresoForzado, BigDecimal inTesoreriaAbif, String inEnviaTrnSaf)
        throws SQLException
    {
        Connection conn = dataSource.getConnection();
        try {
            return execute(conn, inUser, inRutIra, inRutIraDv, inCodigoBarra, inIdOrigen, inPaquete, inRuta, inFolioF01, inFechaOrigen, inLoteCanal, inLoteTipo, inCutMovEstado, inEsReversa, inFrmOpcion, inFmtDataErr, inOperacionFecha, inTurno, inTerminal, inTicket, inSecInstrum, inMedioPago, inMontoPago, inComuna, inIngresoForzado, inTesoreriaAbif, inEnviaTrnSaf);
        } finally {
            conn.close();
        }
    }

    /**
     * Executes procedure "RECA.PKG_CAJA_SERVICES_TRX.AR_PAGAR_CAJA" using a Connection.
     */
    public static ArPagarCajaResult execute(Connection conn, String inUser, BigDecimal inRutIra, String inRutIraDv, String inCodigoBarra, String inIdOrigen, String inPaquete, String inRuta, BigDecimal inFolioF01, Date inFechaOrigen, BigDecimal inLoteCanal, BigDecimal inLoteTipo, BigDecimal inCutMovEstado, String inEsReversa, String inFrmOpcion, String inFmtDataErr, String inOperacionFecha, String inTurno, String inTerminal, BigDecimal inTicket, BigDecimal inSecInstrum, String inMedioPago, BigDecimal inMontoPago, BigDecimal inComuna, String inIngresoForzado, BigDecimal inTesoreriaAbif, String inEnviaTrnSaf)
        throws SQLException
    {
        ArPagarCajaResult result = new ArPagarCajaResult();
        ArrayList resultSets = new ArrayList();
        if (conn.getMetaData().getURL().startsWith("jdbc:oracle:")) {
            CallableStatement call = conn.prepareCall("{call RECA.PKG_CAJA_SERVICES_TRX.AR_PAGAR_CAJA(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}");
            try {
                call.setString(1, inUser);
                call.setBigDecimal(2, inRutIra);
                call.setString(3, inRutIraDv);
                call.setString(4, inCodigoBarra);
                call.setString(5, inIdOrigen);
                call.setString(6, inPaquete);
                call.setString(7, inRuta);
                call.setBigDecimal(8, inFolioF01);
                call.setTimestamp(9, toTimestamp(inFechaOrigen));
                call.setBigDecimal(10, inLoteCanal);
                call.setBigDecimal(11, inLoteTipo);
                call.setBigDecimal(12, inCutMovEstado);
                call.setString(13, inEsReversa);
                call.setString(14, inFrmOpcion);
                call.setString(15, inFmtDataErr);
                call.setString(16, inOperacionFecha);
                call.setString(17, inTurno);
                call.setString(18, inTerminal);
                call.setBigDecimal(19, inTicket);
                call.setBigDecimal(20, inSecInstrum);
                call.setString(21, inMedioPago);
                call.setBigDecimal(22, inMontoPago);
                call.setBigDecimal(23, inComuna);
                call.setString(24, inIngresoForzado);
                call.setBigDecimal(25, inTesoreriaAbif);
                call.setString(26, inEnviaTrnSaf);
                call.registerOutParameter(27, Types.NUMERIC);
                call.registerOutParameter(28, Types.VARCHAR);
                call.registerOutParameter(29, Types.VARCHAR);
                call.registerOutParameter(30, ORACLE_CURSOR);
                call.registerOutParameter(31, Types.TIMESTAMP);
                call.execute();
                result.setOutErrlvl(call.getBigDecimal(27));
                result.setOutMensajes(call.getString(28));
                result.setOutContestId(call.getString(29));
                resultSets.add(toRowSet((ResultSet)call.getObject(30)));
                result.setOutFechaContable(call.getTimestamp(31));
            } finally {
                call.close();
            }
        } else {
            CallableStatement call = conn.prepareCall("{call RECA.PKG_CAJA_SERVICES_TRX.AR_PAGAR_CAJA(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}");
            try {
                call.setString(1, inUser);
                call.setBigDecimal(2, inRutIra);
                call.setString(3, inRutIraDv);
                call.setString(4, inCodigoBarra);
                call.setString(5, inIdOrigen);
                call.setString(6, inPaquete);
                call.setString(7, inRuta);
                call.setBigDecimal(8, inFolioF01);
                call.setTimestamp(9, toTimestamp(inFechaOrigen));
                call.setBigDecimal(10, inLoteCanal);
                call.setBigDecimal(11, inLoteTipo);
                call.setBigDecimal(12, inCutMovEstado);
                call.setString(13, inEsReversa);
                call.setString(14, inFrmOpcion);
                call.setString(15, inFmtDataErr);
                call.setString(16, inOperacionFecha);
                call.setString(17, inTurno);
                call.setString(18, inTerminal);
                call.setBigDecimal(19, inTicket);
                call.setBigDecimal(20, inSecInstrum);
                call.setString(21, inMedioPago);
                call.setBigDecimal(22, inMontoPago);
                call.setBigDecimal(23, inComuna);
                call.setString(24, inIngresoForzado);
                call.setBigDecimal(25, inTesoreriaAbif);
                call.setString(26, inEnviaTrnSaf);
                call.registerOutParameter(27, Types.NUMERIC);
                call.registerOutParameter(28, Types.VARCHAR);
                call.registerOutParameter(29, Types.VARCHAR);
                call.registerOutParameter(30, Types.TIMESTAMP);
                int updateCount = 0;
                boolean haveRset = call.execute();
                while (haveRset || updateCount != -1) {
                    if (!haveRset)
                        updateCount = call.getUpdateCount();
                    else
                        resultSets.add(toRowSet(call.getResultSet()));
                    haveRset = call.getMoreResults();
                }
                result.setOutErrlvl(call.getBigDecimal(27));
                result.setOutMensajes(call.getString(28));
                result.setOutContestId(call.getString(29));
                result.setOutFechaContable(call.getTimestamp(30));
            } finally {
                call.close();
            }
        }
        if (resultSets.size() > 0) {
            RowSet[] rowSets = new RowSet[resultSets.size()];
            result.setRowSets((RowSet[]) resultSets.toArray(rowSets));
        }
        return result;
    }
}
