package org.openuri;

import java.math.BigDecimal;
import java.util.Arrays;
import java.util.Calendar;
import java.util.GregorianCalendar;

import javax.ejb.EJB;
import javax.jws.WebService;
import javax.sql.RowSet;
import javax.xml.datatype.DatatypeConfigurationException;
import javax.xml.datatype.DatatypeFactory;
import javax.xml.datatype.XMLGregorianCalendar;
import javax.xml.ws.BindingType;

import locator.ServicesLocator;
import cl.teso.reca.cajasrv.pkgcajaservices.GetTablaOficinasResult;
import cl.teso.reca.cajasrv.pkgcajaservices.PkgCajaServicesRemote;
import cl.teso.reca.pkgcajaserviceslog.PkgCajaServicesLogRemote;
import cl.teso.reca.pkgcajaservicestrx.PkgCajaServicesTrxRemote;
import cl.teso.reca.pkgcajaservicestrx.classes.Messages.PagoResult;
//import cl.teso.reca.pkgcutservicestrx.classes.Messages.ConsultarAvisoReciboResult;
import cl.teso.reca.pkgcutservicestrx.classes.Messages.RecaMensajes;
import cl.teso.reca.pkgcutservicestrx.classes.Util.TypesUtil;

/**
 * This class was generated by the JAX-WS RI. Oracle JAX-WS 2.1.5 Generated
 * source version: 2.1
 * 
 */

@WebService(
			portName = "RecaServicesSoap", 
			serviceName = "RecaServices", 
			targetNamespace = "http://www.openuri.org/", 
			wsdlLocation = "WEB-INF/wsdl/RecaServicesContract.wsdl",
			endpointInterface = "org.openuri.RecaServicesSoap")
@BindingType("http://schemas.xmlsoap.org/wsdl/soap/http")
public class RecaServices_RecaServicesSoapImpl implements RecaServicesSoap {

	public RecaServices_RecaServicesSoapImpl() {
	}

	private ServicesLocator servicesLocator=new ServicesLocator();

	@EJB
    private PkgCajaServicesTrxRemote ejbCajaServicesTrx;

	@EJB
    private PkgCajaServicesLogRemote ejbCajaServicesLog;   
	
	@EJB
    private PkgCajaServicesRemote ejbCajaServices;

	public  static final String appVersion = "110519";
    static final long serialVersionUID = 1L;
    private static String errorConsultaDeudas = "Error en Consulta Deudas: ";
    private static String errorConsultaAR = "Error en Consulta AR: ";          
    private static String errorCode26 = "RUT/ROL con mas de 40 Deudas";
    private static String errorCode80 = "Error en parametros de la consulta";
    

	/**
	 * <p>
	 * Consulta Aviso Recibo.
	 * 
	 * @param formTipo
	 * @param avisoReciboCodigo
	 * @param oficinaId
	 * @return returns org.openuri.ConsultarAvisoReciboResult
	 */
	public ConsultarAvisoReciboResult consultarAvisoRecibo(
			BigDecimal oficinaId, String avisoReciboCodigo, BigDecimal formTipo) {
		// replace with your impl here
		 ConsultarAvisoReciboResult result = null;
		 
		
        try {
        	
        	result = fmtConsultarAvisoReciboResultCaja(
                    ejbCajaServicesTrx.consultaARCaja(oficinaId, avisoReciboCodigo,
                    formTipo));
        	
            if (result != null && result.codigoRetorno > 0) {
                ejbCajaServicesLog.grabaLogTransaccion("CONSULTA_AR", oficinaId,
                        formTipo, avisoReciboCodigo, null,
                        "OFICINAID=" + oficinaId + "/AVISO_RECIBO_CODIGO="
                        + avisoReciboCodigo + "/FORM_TIPO=" + formTipo
                        + "/appVersion="+ TypesUtil.nvlToString(appVersion),
                        new BigDecimal(result.codigoRetorno),
                        result.mensajeRetorno,
                        null,
                        null);
            }
        } catch (Exception f) {            

            /* El grabado en el log es OPCIONAL, por eso se atrapa la excepcion y no se envia.
             No se hace rollback a la transaccion por problemas al grabar el log*/
            f.printStackTrace();
        } finally {            
            if (result != null && result.codigoRetorno > 0
                    && !result.mensajeRetorno.equals(
                    errorConsultaAR + errorCode26)
                    && !result.mensajeRetorno.equals(
                            errorConsultaAR + errorCode80)) {
                result.mensajeRetorno = errorConsultaAR
                        + "Comunicar al Adm. de Sistemas";
            }
        }
        return result;
	}

	/**
	 * <p>
	 * Consulta Deudas.
	 * 
	 * @param clave
	 * @param oficinaId
	 * @return returns org.openuri.ConsultarDeudaResult
	 */
	public ConsultarDeudaResult consultarDeuda(BigDecimal oficinaId,
			RecaClave clave) {
	    
        ConsultarDeudaResult result = null; 		
        
        try
        {     
        	 // ----Cambio para eliminar Zona Horaria en fecha enviadas por Caja
            clave.periodo = toGregorianCalendar(clave.periodo);
            clave.vencimiento = toGregorianCalendar(clave.vencimiento);
            // --       	
        	 		
            ejbCajaServicesTrx=servicesLocator.getPkgCajaServicesTrxRemote();
            result = fmtConsultarDeudaResultCaja(ejbCajaServicesTrx.consultaDeudaCaja(oficinaId, fmtRecaClave(clave)));
            
            if (result.codigoRetorno > 0)
            {
            	ejbCajaServicesLog = servicesLocator.getPkgCajaServicesLogRemote();
            	ejbCajaServicesLog.grabaLogTransaccion("CONSULTA_DEUDA", oficinaId, clave.formTipo, null, clave.rutRol, "OFICINAID=" +
                                                                                                                        "/FORM_TIPO=" +
                                                                                                                        clave.formTipo +
                                                                                                                        "/PERIODO=" +
                                                                                                                        TypesUtil.calendarToString(fromXMLGregorianCalendar(clave.periodo)) +
                                                                                                                        "/RUT_ROL=" +
                                                                                                                        clave.rutRol +
                                                                                                                        "/VENCIMIENTO=" +
                                                                                                                        TypesUtil.calendarToString(fromXMLGregorianCalendar(clave.vencimiento)) +
                                                                                                                        "/appVersion=" +
                                                                                                                        TypesUtil.nvlToString(appVersion), new BigDecimal(result.codigoRetorno), result.mensajeRetorno, null, null);
            }
        }
        catch (Exception f)
        {

            /* El grabado en el log es OPCIONAL, por eso se atrapa la excepcion y no se envia.
             No se hace rollback a la transaccion por problemas al grabar el log*/
            f.printStackTrace();
        }
        finally
        {
            if (result.codigoRetorno > 0 && !result.mensajeRetorno.equals(errorConsultaDeudas + errorCode26) && !result.mensajeRetorno.equals(errorConsultaDeudas + errorCode80))
            {
                result.mensajeRetorno = errorConsultaDeudas + "Comunicar al Adm. de Sistemas";
            }
        }
        return result;
	}

	/**
	 * <p>
	 * Pago Aviso Recibo.
	 * 
	 * @param avisoReciboCodigo
	 * @param claveDeuda
	 * @param folioF01
	 * @param operacionSecuencia
	 * @param operacionFecha
	 * @param terminal
	 * @param turnoInicio
	 * @param avisoReciboFuente
	 * @param operacionFolio
	 * @param montoPagado
	 * @param ingresoForzado
	 * @param oficinaId
	 * @param medioPago
	 * @return returns java.math.BigDecimal
	 */
	public BigDecimal pagarAvisoRecibo(BigDecimal oficinaId, String terminal,
			XMLGregorianCalendar turnoInicio,
			XMLGregorianCalendar operacionFecha, BigDecimal operacionFolio,
			BigDecimal operacionSecuencia, String avisoReciboFuente,
			String avisoReciboCodigo, BigDecimal folioF01,
			BigDecimal montoPagado, MedioPago medioPago,
			Boolean ingresoForzado, RecaClave claveDeuda) {
		Calendar vencimientoInicial = fromXMLGregorianCalendar(claveDeuda.vencimiento);        
		
       		
		
        PagoResult resultPago = new PagoResult();		

        
        try {  
        	 // ----Cambio para eliminar Zona Horaria en fecha enviadas por Caja
            turnoInicio = toGregorianCalendar(turnoInicio);
            operacionFecha = toGregorianCalendar(operacionFecha);
            claveDeuda.periodo = toGregorianCalendar(claveDeuda.periodo);
            claveDeuda.vencimiento = toGregorianCalendar(claveDeuda.vencimiento);
            // --
            
        	resultPago = ejbCajaServicesTrx.pagoARCaja(oficinaId, terminal,
            		fromXMLGregorianCalendar(turnoInicio), fromXMLGregorianCalendar(operacionFecha), operacionFolio, operacionSecuencia,
                    avisoReciboFuente, avisoReciboCodigo, folioF01, montoPagado,
                    fmtMedioPago(medioPago), ingresoForzado, fmtRecaClave(claveDeuda));
        	
            RecaMensajes[] mensajeOracle = resultPago.recaMensajes;
            String mensajeOracleStr = null;
            BigDecimal codigoRetornoOracle = null;

            if (mensajeOracle != null && mensajeOracle.length > 0
                    && mensajeOracle[0] != null) {
                mensajeOracleStr = mensajeOracle[0].getGlosa();
                codigoRetornoOracle = mensajeOracle[0].getCodigo();	
            }	
            ejbCajaServicesLog.grabaLogTransaccion("PAGO", oficinaId,
                    claveDeuda.formTipo, avisoReciboCodigo, claveDeuda.rutRol,
                    "OFICINAID=" + oficinaId + "/TERMINAL=" + terminal
                    + "/TURNO_INICIO=" + TypesUtil.calendarToString(fromXMLGregorianCalendar(turnoInicio))
                    + "/OPERACION_FECHA="
                    + TypesUtil.calendarToString(fromXMLGregorianCalendar(operacionFecha))
                    + "/OPERACION_FOLIO=" + operacionFolio
                    + "/OPERACION_SECUENCIA=" + operacionSecuencia
                    + "/AVISO_RECIBO_FUENTE=" + avisoReciboFuente
                    + "/AVISO_RECIBO_CODIGO=" + avisoReciboCodigo
                    + "/FOLIO_F01=" + folioF01 + "/MONTO_PAGADO=" + montoPagado
                    + "/INGRESO_FORZADO=" + ingresoForzado + "/Cliente Tipo="
                    + claveDeuda.clienteTipo + "/Rut-Rol=" + claveDeuda.rutRol
                    + "/InstitucionId=" + claveDeuda.institId + "/FormTipo="
                    + claveDeuda.formTipo + "/FormFolio=" + claveDeuda.formFolio
                    + "/FormVersion=" + claveDeuda.formVersion + "/Periodo="
                    + TypesUtil.calendarToString(fromXMLGregorianCalendar(claveDeuda.periodo))
                    + "/VencimientoInicial="
                    + TypesUtil.calendarToString(vencimientoInicial)
                    + "/VencimientoFinal="
                    + TypesUtil.calendarToString(fromXMLGregorianCalendar(claveDeuda.vencimiento))
                    + "/Moneda=" + claveDeuda.moneda + "/Medio_Pago="
                    + (medioPago==null ? null:medioPago.nemo)
                    + "/Hora_Servidor="
                    + TypesUtil.calendarToString(Calendar.getInstance())
                    + "/appVersion="+ TypesUtil.nvlToString(appVersion),
                    resultPago.getResultCode(),
                    resultPago.getResultMessage(),
                    codigoRetornoOracle,
                    mensajeOracleStr);
        } catch (Exception f) {

            /* El grabado en el log es OPCIONAL, por eso se atrapa la excepcion y no se envia.
             No se hace rollback a la transaccion por problemas al grabar el log*/
            f.printStackTrace();
        }
            
      /*  if (resultPago.getResultCode().equals(PagoResult.TIMEOUT)) {
            throw new Exception(
                    "Error en Pago: " + resultPago.getResultMessage());
        }*/

        return PagoResult.TRX_COMPLETED;
	}

	/**
	 * <p>
	 * Reversa Pago Aviso Recibo.
	 * 
	 * @param claveDeuda
	 * @param avisoReciboCodigo
	 * @param folioF01
	 * @param terminal
	 * @param turnoInicio
	 * @param avisoReciboFuente
	 * @param montoPagado
	 * @param operacionFolio
	 * @param ingresoForzado
	 * @param operacionSecuencia
	 * @param oficinaId
	 * @param operacionFecha
	 * @return returns java.math.BigDecimal
	 */
	public BigDecimal reversarPagoAvisoRecibo(BigDecimal oficinaId,
			String terminal, XMLGregorianCalendar turnoInicio,
			XMLGregorianCalendar operacionFecha, BigDecimal operacionFolio,
			BigDecimal operacionSecuencia, String avisoReciboFuente,
			String avisoReciboCodigo, BigDecimal folioF01,
			BigDecimal montoPagado, Boolean ingresoForzado, RecaClave claveDeuda) {
		Calendar vencimientoInicial = fromXMLGregorianCalendar(claveDeuda.vencimiento);
        PagoResult resultReversa = new PagoResult();
        
        try {
        	
        	 // ----Cambio para eliminar Zona Horaria en fecha enviadas por Caja
            turnoInicio = toGregorianCalendar(turnoInicio);
            operacionFecha = toGregorianCalendar(operacionFecha);
            claveDeuda.periodo = toGregorianCalendar(claveDeuda.periodo);
            claveDeuda.vencimiento = toGregorianCalendar(claveDeuda.vencimiento);
            // --
        	
        	resultReversa = ejbCajaServicesTrx.reversaPagoARCaja(oficinaId, terminal,
            		fromXMLGregorianCalendar(turnoInicio), fromXMLGregorianCalendar(operacionFecha), operacionFolio, operacionSecuencia,
                    avisoReciboFuente, avisoReciboCodigo, folioF01, montoPagado,
                    ingresoForzado, fmtRecaClave(claveDeuda));	
        	
            RecaMensajes[] mensajeOracle = resultReversa.recaMensajes;
            String mensajeOracleStr = null;
            BigDecimal codigoRetornoOracle = null;

            if (mensajeOracle != null && mensajeOracle.length > 0
                    && mensajeOracle[0] != null) {
                mensajeOracleStr = mensajeOracle[0].getGlosa();
                codigoRetornoOracle = mensajeOracle[0].getCodigo();	
            }	
            ejbCajaServicesLog.grabaLogTransaccion("REVERSA", oficinaId,
                    claveDeuda.formTipo, avisoReciboCodigo, claveDeuda.rutRol,
                    "OFICINAID=" + oficinaId + "/TERMINAL=" + terminal
                    + "/TURNO_INICIO=" + TypesUtil.calendarToString(fromXMLGregorianCalendar(turnoInicio))
                    + "/OPERACION_FECHA="
                    + TypesUtil.calendarToString(fromXMLGregorianCalendar(operacionFecha))
                    + "/OPERACION_FOLIO=" + operacionFolio
                    + "/OPERACION_SECUENCIA=" + operacionSecuencia
                    + "/AVISO_RECIBO_FUENTE=" + avisoReciboFuente
                    + "/AVISO_RECIBO_CODIGO=" + avisoReciboCodigo
                    + "/FOLIO_F01=" + folioF01 + "/MONTO_PAGADO=" + montoPagado
                    + "/INGRESO_FORZADO=" + ingresoForzado + "/Cliente Tipo="
                    + claveDeuda.clienteTipo + "/Rut-Rol=" + claveDeuda.rutRol
                    + "/InstitucionId=" + claveDeuda.institId + "/FormTipo="
                    + claveDeuda.formTipo + "/FormFolio=" + claveDeuda.formFolio
                    + "/FormVersion=" + claveDeuda.formVersion + "/Periodo="
                    + TypesUtil.calendarToString(fromXMLGregorianCalendar(claveDeuda.periodo))
                    + "/VencimientoInicial="
                    + TypesUtil.calendarToString(vencimientoInicial)
                    + "/VencimientoFinal="
                    + TypesUtil.calendarToString(fromXMLGregorianCalendar(claveDeuda.vencimiento))
                    + "/Moneda=" + claveDeuda.moneda + "/Hora_Servidor="
                    + TypesUtil.calendarToString(Calendar.getInstance())
                    + "/appVersion="+ TypesUtil.nvlToString(appVersion),
                    resultReversa.getResultCode(),
                    resultReversa.getResultMessage(),
                    codigoRetornoOracle,
                    mensajeOracleStr);
        } catch (Exception f) {

            /* El grabado en el log es OPCIONAL, por eso se atrapa la excepcion y no se envia.
             No se hace rollback a la transaccion por problemas al grabar el log*/
            f.printStackTrace();
        }
      /*  if (resultReversa.getResultCode().equals(PagoResult.TIMEOUT)) {
            throw new Exception(
                    "Error en Pago: " + resultReversa.getResultMessage());
        }*/

        return PagoResult.TRX_COMPLETED;
	}

	/**
	 * <p>
	 * Extrae Tabla Oficinas TGR.
	 * 
	 * @return returns org.openuri.ArrayOfOficina
	 */
	public ArrayOfOficina extraerTablaOficinas() {
		ArrayOfOficina arrayOfOficina = new ArrayOfOficina();
		
		
		try
		{
		GetTablaOficinasResult result = ejbCajaServices.getTablaOficinas();
        RowSet rs = result.getRowSet(0);
        
        
        
        rs.last();

        int rowcount = rs.getRow();

        rs.beforeFirst();
		 
        Oficina[] tablaOficinas = new Oficina[rowcount];
        int i = 0;

        while (rs.next()) {
            try
            {            
            tablaOficinas[i] = new Oficina();
            tablaOficinas[i].rutIra = rs.getBigDecimal("RUT_IRA");
            tablaOficinas[i].dvIra = rs.getString("DV_IRA");
            tablaOficinas[i].codigoABIF = rs.getBigDecimal("COD_ABIF")== null ? null : rs.getBigDecimal("COD_ABIF") ;
            tablaOficinas[i].oficinaNombre = rs.getString("OFICINA_NOMBRE")    == null ? null : rs.getString("OFICINA_NOMBRE");
            tablaOficinas[i].oficinaConara = rs.getBigDecimal("COMUNA_CONARA")   == null ? null : rs.getBigDecimal("COMUNA_CONARA") ;
            tablaOficinas[i].oficinaNumero = rs.getBigDecimal("OFICINA_NUMERO")  == null ? null : rs.getBigDecimal("OFICINA_NUMERO");
            tablaOficinas[i].oficinaCuentaCte = rs.getString("CTA_CTE")  == null ? null : rs.getBigDecimal("CTA_CTE");
            i = i + 1;
            }
            catch (Exception e)
            {
                e.printStackTrace();
                throw new Exception("Error al obtener oficina:"+rs.getBigDecimal("RUT_IRA")+ "."+e);
            }    
        }
        rs.close();
        
        
        if (tablaOficinas != null)
        	arrayOfOficina.oficina = Arrays.asList(tablaOficinas);        
		}
		catch (Exception e)
		{
			e.printStackTrace();
		}	
		
        
        return arrayOfOficina;
	}

	/**
	 * <p>
	 * Extrae Hora Servidor.
	 * 
	 * @return returns java.lang.String
	 */
	public String extraerHoraServidor() {
		// replace with your impl here
		return null;
	}

	/**
	 * <p>
	 * Pago Aviso Recibo.
	 * 
	 * @param folioEnvio
	 * @return returns org.openuri.ProcesaTrnSafResult
	 */
	public ProcesaTrnSafResult pagoArCajaVaxSaf(BigDecimal folioEnvio) {
		// replace with your impl here
		return null;
	}
	
	
//-------------------------------------------------------------------------------------------------------------	
cl.teso.reca.pkgcutservicestrx.classes.Messages.RecaClave fmtRecaClave
     (RecaClave claveIn) throws Exception{
 cl.teso.reca.pkgcutservicestrx.classes.Messages.RecaClave claveOut = null;

 if (claveIn != null) {
     claveOut = new cl.teso.reca.pkgcutservicestrx.classes.Messages.RecaClave();
     claveOut.setClienteTipo(claveIn.clienteTipo);
     claveOut.setFormFolio(claveIn.formFolio);
     claveOut.setFormTipo(claveIn.formTipo);
     claveOut.setFormVer("A");
     claveOut.setInstitId(claveIn.institId);
     claveOut.setMonedaId(claveIn.moneda);
     claveOut.setPeriodo(fromXMLGregorianCalendar(claveIn.periodo));
     try {
         String rutRol[] = claveIn.rutRol.split("-");

         claveOut.setRutRol(new BigDecimal(rutRol[0]));
         claveOut.setRutRolDv(rutRol[1]);
     } catch (Exception e) {}	
     claveOut.setVencimiento(fromXMLGregorianCalendar(claveIn.vencimiento));
 }	
 return claveOut;
}
	 
	 
ConsultarDeudaResult fmtConsultarDeudaResultCaja
        (cl.teso.reca.pkgcajaservicestrx.classes.Messages.ConsultarDeudaResult result1) {
    ConsultarDeudaResult result2 = null;

    try {
        result2 = new ConsultarDeudaResult();
        result2.codigoRetorno = result1.getResultCode().intValue();
        result2.mensajeRetorno = result1.getResultMessage();
	
        RecaDeuda[] deudaArr2 = null;

        if (result1.recaDeudaArr != null) {
            int deudaArrLength = result1.recaDeudaArr.length;

            deudaArr2 = new RecaDeuda[deudaArrLength];
            for (int i = 0; i < deudaArrLength; i++) {
                deudaArr2[i] = fmtRecaDeudaCaja(result1.recaDeudaArr[i]);
            }
        }
        ArrayOfRecaDeuda listaDeudas = new ArrayOfRecaDeuda();
        if (deudaArr2 != null)
        listaDeudas.recaDeuda = Arrays.asList(deudaArr2);
        
        result2.recaDeudaArr  = listaDeudas;
    } catch (Exception e) {
        e.printStackTrace();
        result2.codigoRetorno = 1;
        result2.mensajeRetorno = "Excepcion en fmtConsultarDeudaResultCaja: "
                + e.toString();
    }			
    return result2;
}	 

RecaDeuda fmtRecaDeudaCaja
(cl.teso.reca.pkgcutservicestrx.classes.Messages.RecaDeuda  deudaIn) throws Exception {
RecaDeuda deudaOut = null;

if (deudaIn != null) {
deudaOut = new RecaDeuda();
deudaOut.avisoReciboCodigo = deudaIn.getAvisoReciboCodigo();
deudaOut.avisoReciboFuente = deudaIn.getAvisoReciboFuente();
deudaOut.fechaEmision = toXMLGregorianCalendar(deudaIn.getFechaEmision());
deudaOut.fechaLiquidacion = toXMLGregorianCalendar(deudaIn.getFechaLiquidacion());
deudaOut.fechaValidez = toXMLGregorianCalendar(deudaIn.getFechaValidez());
deudaOut.monedaId = deudaIn.getMonedaId();
deudaOut.montoCondonacion = deudaIn.getMontoCondonacion();
deudaOut.montoEnPlazo = deudaIn.getMontoEnPlazo();
deudaOut.montoIntereses = deudaIn.getMontoIntereses();
deudaOut.montoMultas = deudaIn.getMontoMultas();
deudaOut.montoReajustes = deudaIn.getMontoReajustes();
deudaOut.montoTotal = deudaIn.getMontoTotal();
deudaOut.recaClave = fmtRecaClaveCaja(deudaIn.getRecaClave());
}
return deudaOut;
}

RecaClave fmtRecaClaveCaja
(cl.teso.reca.pkgcutservicestrx.classes.Messages.RecaClave claveIn) throws Exception {
RecaClave claveOut = null;

if (claveIn != null) {
claveOut = new RecaClave();
claveOut.clienteTipo = claveIn.getClienteTipo();
claveOut.formFolio = claveIn.getFormFolio();
claveOut.formTipo = claveIn.getFormTipo();
claveOut.formVersion = null;
claveOut.institId = claveIn.getInstitId();
claveOut.moneda = claveIn.getMonedaId();
claveOut.periodo = toXMLGregorianCalendar(claveIn.getPeriodo());
claveOut.rutRol = claveIn.getRutRol().toString() + "-"
        + claveIn.getRutRolDv();
claveOut.vencimiento = toXMLGregorianCalendar(claveIn.getVencimiento());
}
return claveOut;
}

ConsultarAvisoReciboResult fmtConsultarAvisoReciboResultCaja
(cl.teso.reca.pkgcutservicestrx.classes.Messages.ConsultarAvisoReciboResult result1) throws Exception{
ConsultarAvisoReciboResult result2 = null;

if (result1 != null) {
result2 = new ConsultarAvisoReciboResult();
result2.codigoRetorno = result1.getResultCode().intValue();
result2.mensajeRetorno = result1.getResultMessage();
result2.recaDeuda = fmtRecaDeudaCaja(result1.recaDeuda);
}	
return result2;
}

cl.teso.reca.pkgcajaservicestrx.classes.Messages.MedioPago fmtMedioPago(MedioPago medioPago) 
{
	cl.teso.reca.pkgcajaservicestrx.classes.Messages.MedioPago medioPagoFmt = new cl.teso.reca.pkgcajaservicestrx.classes.Messages.MedioPago();

	if (medioPago != null)
	{
		cl.teso.reca.pkgcajaservicestrx.classes.Messages.Cheque chequeFmt = new cl.teso.reca.pkgcajaservicestrx.classes.Messages.Cheque();
		if (medioPago.cheque != null)
		{
			chequeFmt.banco = medioPago.cheque.banco;
			chequeFmt.cuenta = medioPago.cheque.cuenta;
			chequeFmt.fecha = fromXMLGregorianCalendar(medioPago.cheque.fecha);
			chequeFmt.plaza = medioPago.cheque.plaza;
			chequeFmt.serie = medioPago.cheque.serie;			
		}
		medioPagoFmt.cheque = chequeFmt;
		
		medioPagoFmt.fecha = fromXMLGregorianCalendar(medioPago.fecha);
		medioPagoFmt.nemo = medioPago.nemo;
		
		cl.teso.reca.pkgcajaservicestrx.classes.Messages.Tarjeta tarjetaFmt = new cl.teso.reca.pkgcajaservicestrx.classes.Messages.Tarjeta();
		if (medioPago.tarjeta != null)
		{
			tarjetaFmt.autorizadorCodigo = medioPago.tarjeta.autorizadorCodigo;
			tarjetaFmt.autorizadorFecha = fromXMLGregorianCalendar(medioPago.tarjeta.autorizadorFecha);
			tarjetaFmt.autorizadorTipo = medioPago.tarjeta.autorizadorTipo;
			tarjetaFmt.cuotaNumero = medioPago.tarjeta.cuotaNumero;
			tarjetaFmt.cuotaTipo = medioPago.tarjeta.cuotaTipo;
			tarjetaFmt.tarjetaMarca = medioPago.tarjeta.tarjetaMarca;
			tarjetaFmt.tarjetaTipo = medioPago.tarjeta.tarjetaTipo;			
		}
		medioPagoFmt.tarjeta = tarjetaFmt;		
		
	}
	
	return medioPagoFmt;
}

 
    public static Calendar fromXMLGregorianCalendar(XMLGregorianCalendar xc) {
    	if (xc == null) 
    	return null;
   Calendar c = Calendar.getInstance();   
   
   c.setTimeInMillis(xc.toGregorianCalendar().getTimeInMillis());
   return c;
  }

  public static XMLGregorianCalendar toXMLGregorianCalendar(Calendar c) throws DatatypeConfigurationException
     {	  
	  if (c == null) 
	    	return null;
	  
   GregorianCalendar gc = new GregorianCalendar();
   gc.setTimeInMillis(c.getTimeInMillis());
   XMLGregorianCalendar xc = DatatypeFactory.newInstance().newXMLGregorianCalendar(gc);
   return xc;
  }
  
  XMLGregorianCalendar toGregorianCalendar
  (XMLGregorianCalendar c1) throws DatatypeConfigurationException {
if (c1 != null) {
	GregorianCalendar c2 =    new GregorianCalendar(c1.getYear(),
          c1.getMonth()-1,c1.getDay(),
          c1.getHour(), c1.getMinute(),
          c1.getSecond());
  
  return DatatypeFactory.newInstance().newXMLGregorianCalendar(c2);  
} else {
  return null;
}	
}     

  

}

