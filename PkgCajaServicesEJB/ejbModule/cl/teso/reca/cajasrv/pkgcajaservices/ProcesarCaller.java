/*
 * File: ProcesarCaller.java  2009-09-10 15:52:15-04:00
 * User: Felipe Gonzalez (DP S.A.)
 *
 * File generated by OBCOM SQL Wizard 5.1.248 (www.obcom.cl).
 * DO NOT EDIT THIS FILE <<Signature:7TGozXlOATUGjR4ouMozY->>.
 */

package cl.teso.reca.cajasrv.pkgcajaservices;

import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.SQLException;
import java.sql.Types;
import java.util.ArrayList;
import javax.sql.DataSource;
import javax.sql.RowSet;

/**
 * Implements a caller of procedure "RECA.PKG_CAJA_SERVICES.PROCESAR".
 *
 * TOUPLESTGF         VARCHAR2(4000)     Input
 * CONTEXTTGFIN       VARCHAR2(4000)     Input
 * ITEMS_OUT          VARCHAR2(4000)     Output
 * CONTEXTTGFOUT      VARCHAR2(4000)     Output
 * MESSAGESTGF        VARCHAR2(4000)     Output
 * RESULTADO          NUMBER             Output
 */
public class ProcesarCaller extends ProcedureCaller
{
    /**
     * Executes procedure "RECA.PKG_CAJA_SERVICES.PROCESAR" using a DataSource.
     */
    public static ProcesarResult execute(DataSource dataSource, String touplestgf, String contexttgfin)
        throws SQLException
    {
        Connection conn = dataSource.getConnection();
        try
        {
            return execute(conn, touplestgf, contexttgfin);
        }
        finally
        {
            conn.close();
        }
    }

    /**
     * Executes procedure "RECA.PKG_CAJA_SERVICES.PROCESAR" using a Connection.
     */
    public static ProcesarResult execute(Connection conn, String touplestgf, String contexttgfin)
        throws SQLException
    {
        ProcesarResult result = new ProcesarResult();
        ArrayList resultSets = new ArrayList();
        CallableStatement call = conn.prepareCall("{call RECA.PKG_CAJA_SERVICES.PROCESAR(?,?,?,?,?,?)}");
        try
        {
            call.setString(1, touplestgf);
            call.setString(2, contexttgfin);
            call.registerOutParameter(3, Types.VARCHAR);
            call.registerOutParameter(4, Types.VARCHAR);
            call.registerOutParameter(5, Types.VARCHAR);
            call.registerOutParameter(6, Types.NUMERIC);
            int updateCount = 0;
            boolean haveRset = call.execute();
            while (haveRset || updateCount != -1)
            {
                if (!haveRset)
                    updateCount = call.getUpdateCount();
                else
                    resultSets.add(toRowSet(call.getResultSet()));
                haveRset = call.getMoreResults();
            }
            result.setItemsOut(call.getString(3));
            result.setContexttgfout(call.getString(4));
            result.setMessagestgf(call.getString(5));
            result.setResultado(call.getBigDecimal(6));
        }
        finally
        {
            call.close();
        }
        if (resultSets.size() > 0)
        {
            RowSet[] rowSets = new RowSet[resultSets.size()];
            result.setRowSets((RowSet[]) resultSets.toArray(rowSets));
        }
        return result;
    }
}
